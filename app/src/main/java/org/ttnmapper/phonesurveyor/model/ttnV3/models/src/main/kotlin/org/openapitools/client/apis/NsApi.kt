/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3GenerateDevAddrResponse
import org.openapitools.client.models.V3MACSettings

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class NsApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * GenerateDevAddr requests a device address assignment from the Network Server.
    * 
    * @return V3GenerateDevAddrResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun nsGenerateDevAddr() : V3GenerateDevAddrResponse {
        val localVarResponse = nsGenerateDevAddrWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3GenerateDevAddrResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * GenerateDevAddr requests a device address assignment from the Network Server.
    * 
    * @return ApiInfrastructureResponse<V3GenerateDevAddrResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun nsGenerateDevAddrWithHttpInfo() : ApiInfrastructureResponse<V3GenerateDevAddrResponse?> {
        val localVariableConfig = nsGenerateDevAddrRequestConfig()

        return request<Unit, V3GenerateDevAddrResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation nsGenerateDevAddr
    *
    * @return RequestConfig
    */
    fun nsGenerateDevAddrRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ns/dev_addr",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * GetDefaultMACSettings retrieves the default MAC settings for a frequency plan.
    * 
    * @param frequencyPlanId  
    * @param lorawanPhyVersion  
    * @return V3MACSettings
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun nsGetDefaultMACSettings(frequencyPlanId: kotlin.String, lorawanPhyVersion: kotlin.String) : V3MACSettings {
        val localVarResponse = nsGetDefaultMACSettingsWithHttpInfo(frequencyPlanId = frequencyPlanId, lorawanPhyVersion = lorawanPhyVersion)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3MACSettings
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * GetDefaultMACSettings retrieves the default MAC settings for a frequency plan.
    * 
    * @param frequencyPlanId  
    * @param lorawanPhyVersion  
    * @return ApiInfrastructureResponse<V3MACSettings?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun nsGetDefaultMACSettingsWithHttpInfo(frequencyPlanId: kotlin.String, lorawanPhyVersion: kotlin.String) : ApiInfrastructureResponse<V3MACSettings?> {
        val localVariableConfig = nsGetDefaultMACSettingsRequestConfig(frequencyPlanId = frequencyPlanId, lorawanPhyVersion = lorawanPhyVersion)

        return request<Unit, V3MACSettings>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation nsGetDefaultMACSettings
    *
    * @param frequencyPlanId  
    * @param lorawanPhyVersion  
    * @return RequestConfig
    */
    fun nsGetDefaultMACSettingsRequestConfig(frequencyPlanId: kotlin.String, lorawanPhyVersion: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ns/default_mac_settings/{frequency_plan_id}/{lorawan_phy_version}".replace("{"+"frequency_plan_id"+"}", "$frequencyPlanId").replace("{"+"lorawan_phy_version"+"}", "$lorawanPhyVersion"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
