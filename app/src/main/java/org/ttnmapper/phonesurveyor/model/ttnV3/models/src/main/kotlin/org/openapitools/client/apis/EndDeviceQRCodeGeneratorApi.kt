/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3GenerateEndDeviceQRCodeRequest
import org.openapitools.client.models.V3GenerateQRCodeResponse
import org.openapitools.client.models.V3QRCodeFormat
import org.openapitools.client.models.V3QRCodeFormats

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class EndDeviceQRCodeGeneratorApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Generates a QR code.
    * 
    * @param body  
    * @return V3GenerateQRCodeResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun endDeviceQRCodeGeneratorGenerate(body: V3GenerateEndDeviceQRCodeRequest) : V3GenerateQRCodeResponse {
        val localVarResponse = endDeviceQRCodeGeneratorGenerateWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3GenerateQRCodeResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Generates a QR code.
    * 
    * @param body  
    * @return ApiInfrastructureResponse<V3GenerateQRCodeResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun endDeviceQRCodeGeneratorGenerateWithHttpInfo(body: V3GenerateEndDeviceQRCodeRequest) : ApiInfrastructureResponse<V3GenerateQRCodeResponse?> {
        val localVariableConfig = endDeviceQRCodeGeneratorGenerateRequestConfig(body = body)

        return request<V3GenerateEndDeviceQRCodeRequest, V3GenerateQRCodeResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation endDeviceQRCodeGeneratorGenerate
    *
    * @param body  
    * @return RequestConfig
    */
    fun endDeviceQRCodeGeneratorGenerateRequestConfig(body: V3GenerateEndDeviceQRCodeRequest) : RequestConfig<V3GenerateEndDeviceQRCodeRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/qr-codes/end-devices",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Return the QR code format.
    * 
    * @param formatId QR code format identifier. Enumerate available formats with rpc ListFormats in the EndDeviceQRCodeGenerator service. 
    * @return V3QRCodeFormat
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun endDeviceQRCodeGeneratorGetFormat(formatId: kotlin.String) : V3QRCodeFormat {
        val localVarResponse = endDeviceQRCodeGeneratorGetFormatWithHttpInfo(formatId = formatId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3QRCodeFormat
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Return the QR code format.
    * 
    * @param formatId QR code format identifier. Enumerate available formats with rpc ListFormats in the EndDeviceQRCodeGenerator service. 
    * @return ApiInfrastructureResponse<V3QRCodeFormat?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun endDeviceQRCodeGeneratorGetFormatWithHttpInfo(formatId: kotlin.String) : ApiInfrastructureResponse<V3QRCodeFormat?> {
        val localVariableConfig = endDeviceQRCodeGeneratorGetFormatRequestConfig(formatId = formatId)

        return request<Unit, V3QRCodeFormat>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation endDeviceQRCodeGeneratorGetFormat
    *
    * @param formatId QR code format identifier. Enumerate available formats with rpc ListFormats in the EndDeviceQRCodeGenerator service. 
    * @return RequestConfig
    */
    fun endDeviceQRCodeGeneratorGetFormatRequestConfig(formatId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/qr-codes/end-devices/formats/{format_id}".replace("{"+"format_id"+"}", "$formatId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Returns the supported formats.
    * 
    * @return V3QRCodeFormats
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun endDeviceQRCodeGeneratorListFormats() : V3QRCodeFormats {
        val localVarResponse = endDeviceQRCodeGeneratorListFormatsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3QRCodeFormats
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Returns the supported formats.
    * 
    * @return ApiInfrastructureResponse<V3QRCodeFormats?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun endDeviceQRCodeGeneratorListFormatsWithHttpInfo() : ApiInfrastructureResponse<V3QRCodeFormats?> {
        val localVariableConfig = endDeviceQRCodeGeneratorListFormatsRequestConfig()

        return request<Unit, V3QRCodeFormats>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation endDeviceQRCodeGeneratorListFormats
    *
    * @return RequestConfig
    */
    fun endDeviceQRCodeGeneratorListFormatsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/qr-codes/end-devices/formats",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
