/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.Lorawanv3GatewayIdentifiers
import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3AuthorizeGatewayRequest
import org.openapitools.client.models.V3ClaimGatewayRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class GatewayClaimingServerApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * AuthorizeGateway allows a gateway to be claimed.
    * 
    * @param gatewayIdsGatewayId  
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayClaimingServerAuthorizeGateway(gatewayIdsGatewayId: kotlin.String, body: V3AuthorizeGatewayRequest) : kotlin.Any {
        val localVarResponse = gatewayClaimingServerAuthorizeGatewayWithHttpInfo(gatewayIdsGatewayId = gatewayIdsGatewayId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * AuthorizeGateway allows a gateway to be claimed.
    * 
    * @param gatewayIdsGatewayId  
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayClaimingServerAuthorizeGatewayWithHttpInfo(gatewayIdsGatewayId: kotlin.String, body: V3AuthorizeGatewayRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = gatewayClaimingServerAuthorizeGatewayRequestConfig(gatewayIdsGatewayId = gatewayIdsGatewayId, body = body)

        return request<V3AuthorizeGatewayRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayClaimingServerAuthorizeGateway
    *
    * @param gatewayIdsGatewayId  
    * @param body  
    * @return RequestConfig
    */
    fun gatewayClaimingServerAuthorizeGatewayRequestConfig(gatewayIdsGatewayId: kotlin.String, body: V3AuthorizeGatewayRequest) : RequestConfig<V3AuthorizeGatewayRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/gcls/gateways/{gateway_ids.gateway_id}/authorize".replace("{"+"gateway_ids.gateway_id"+"}", "$gatewayIdsGatewayId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Claims a gateway by claim authentication code or QR code and transfers the gateway to the target user.
    * 
    * @param body  
    * @return Lorawanv3GatewayIdentifiers
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayClaimingServerClaim(body: V3ClaimGatewayRequest) : Lorawanv3GatewayIdentifiers {
        val localVarResponse = gatewayClaimingServerClaimWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Lorawanv3GatewayIdentifiers
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Claims a gateway by claim authentication code or QR code and transfers the gateway to the target user.
    * 
    * @param body  
    * @return ApiInfrastructureResponse<Lorawanv3GatewayIdentifiers?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayClaimingServerClaimWithHttpInfo(body: V3ClaimGatewayRequest) : ApiInfrastructureResponse<Lorawanv3GatewayIdentifiers?> {
        val localVariableConfig = gatewayClaimingServerClaimRequestConfig(body = body)

        return request<V3ClaimGatewayRequest, Lorawanv3GatewayIdentifiers>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayClaimingServerClaim
    *
    * @param body  
    * @return RequestConfig
    */
    fun gatewayClaimingServerClaimRequestConfig(body: V3ClaimGatewayRequest) : RequestConfig<V3ClaimGatewayRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/gcls/claim",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * UnauthorizeGateway prevents a gateway from being claimed.
    * 
    * @param gatewayId  
    * @param eui Secondary identifier, which can only be used in specific requests. (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayClaimingServerUnauthorizeGateway(gatewayId: kotlin.String, eui: kotlin.ByteArray?) : kotlin.Any {
        val localVarResponse = gatewayClaimingServerUnauthorizeGatewayWithHttpInfo(gatewayId = gatewayId, eui = eui)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * UnauthorizeGateway prevents a gateway from being claimed.
    * 
    * @param gatewayId  
    * @param eui Secondary identifier, which can only be used in specific requests. (optional)
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayClaimingServerUnauthorizeGatewayWithHttpInfo(gatewayId: kotlin.String, eui: kotlin.ByteArray?) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = gatewayClaimingServerUnauthorizeGatewayRequestConfig(gatewayId = gatewayId, eui = eui)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayClaimingServerUnauthorizeGateway
    *
    * @param gatewayId  
    * @param eui Secondary identifier, which can only be used in specific requests. (optional)
    * @return RequestConfig
    */
    fun gatewayClaimingServerUnauthorizeGatewayRequestConfig(gatewayId: kotlin.String, eui: kotlin.ByteArray?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (eui != null) {
                    put("eui", listOf(eui.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/gcls/gateways/{gateway_id}/authorize".replace("{"+"gateway_id"+"}", "$gatewayId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
