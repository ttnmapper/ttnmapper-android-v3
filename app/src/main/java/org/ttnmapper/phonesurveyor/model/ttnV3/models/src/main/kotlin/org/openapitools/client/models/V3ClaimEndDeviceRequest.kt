/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.V3ApplicationIdentifiers
import org.openapitools.client.models.V3ClaimEndDeviceRequestAuthenticatedIdentifiers

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param authenticatedIdentifiers 
 * @param qrCode Raw QR code contents.
 * @param targetApplicationIds 
 * @param targetDeviceId End device ID of the target end device. If empty, use the source device ID.
 * @param targetNetworkServerAddress The address of the Network Server where the device will be registered. If set and if the source device is currently registered on a Network Server, settings will be transferred. If not set, the device shall not be registered on a Network Server.
 * @param targetNetworkServerKekLabel The KEK label of the Network Server to use for wrapping network session keys.
 * @param targetApplicationServerAddress The address of the Application Server where the device will be registered. If set and if the source device is currently registered on an Application Server, settings will be transferred. If not set, the device shall not be registered on an Application Server.
 * @param targetApplicationServerKekLabel The KEK label of the Application Server to use for wrapping the application session key.
 * @param targetApplicationServerId The AS-ID of the Application Server to use.
 * @param targetNetId Home NetID.
 * @param invalidateAuthenticationCode If set, invalidate the authentication code with which the device gets claimed. This prohibits subsequent claiming requests.
 */
@JsonClass(generateAdapter = true)
data class V3ClaimEndDeviceRequest (

    @Json(name = "authenticated_identifiers")
    val authenticatedIdentifiers: V3ClaimEndDeviceRequestAuthenticatedIdentifiers? = null,

    /* Raw QR code contents. */
    @Json(name = "qr_code")
    val qrCode: kotlin.ByteArray? = null,

    @Json(name = "target_application_ids")
    val targetApplicationIds: V3ApplicationIdentifiers? = null,

    /* End device ID of the target end device. If empty, use the source device ID. */
    @Json(name = "target_device_id")
    val targetDeviceId: kotlin.String? = null,

    /* The address of the Network Server where the device will be registered. If set and if the source device is currently registered on a Network Server, settings will be transferred. If not set, the device shall not be registered on a Network Server. */
    @Json(name = "target_network_server_address")
    val targetNetworkServerAddress: kotlin.String? = null,

    /* The KEK label of the Network Server to use for wrapping network session keys. */
    @Json(name = "target_network_server_kek_label")
    val targetNetworkServerKekLabel: kotlin.String? = null,

    /* The address of the Application Server where the device will be registered. If set and if the source device is currently registered on an Application Server, settings will be transferred. If not set, the device shall not be registered on an Application Server. */
    @Json(name = "target_application_server_address")
    val targetApplicationServerAddress: kotlin.String? = null,

    /* The KEK label of the Application Server to use for wrapping the application session key. */
    @Json(name = "target_application_server_kek_label")
    val targetApplicationServerKekLabel: kotlin.String? = null,

    /* The AS-ID of the Application Server to use. */
    @Json(name = "target_application_server_id")
    val targetApplicationServerId: kotlin.String? = null,

    /* Home NetID. */
    @Json(name = "target_net_id")
    val targetNetId: kotlin.ByteArray? = null,

    /* If set, invalidate the authentication code with which the device gets claimed. This prohibits subsequent claiming requests. */
    @Json(name = "invalidate_authentication_code")
    val invalidateAuthenticationCode: kotlin.Boolean? = null

)

