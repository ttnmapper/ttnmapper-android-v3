/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.V3ApplicationDownlink
import org.openapitools.client.models.V3ApplicationDownlinkFailed
import org.openapitools.client.models.V3ApplicationInvalidatedDownlinks
import org.openapitools.client.models.V3ApplicationJoinAccept
import org.openapitools.client.models.V3ApplicationLocation
import org.openapitools.client.models.V3ApplicationServiceData
import org.openapitools.client.models.V3ApplicationUplink
import org.openapitools.client.models.V3EndDeviceIdentifiers

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Application uplink message.
 *
 * @param endDeviceIds 
 * @param correlationIds 
 * @param receivedAt Server time when the Application Server received the message.
 * @param uplinkMessage 
 * @param joinAccept 
 * @param downlinkAck 
 * @param downlinkNack 
 * @param downlinkSent 
 * @param downlinkFailed 
 * @param downlinkQueued 
 * @param downlinkQueueInvalidated 
 * @param locationSolved 
 * @param serviceData 
 * @param simulated Signals if the message is coming from the Network Server or is simulated.
 */
@JsonClass(generateAdapter = true)
data class V3ApplicationUp (

    @Json(name = "end_device_ids")
    val endDeviceIds: V3EndDeviceIdentifiers? = null,

    @Json(name = "correlation_ids")
    val correlationIds: kotlin.collections.List<kotlin.String>? = null,

    /* Server time when the Application Server received the message. */
    @Json(name = "received_at")
    val receivedAt: java.time.OffsetDateTime? = null,

    @Json(name = "uplink_message")
    val uplinkMessage: V3ApplicationUplink? = null,

    @Json(name = "join_accept")
    val joinAccept: V3ApplicationJoinAccept? = null,

    @Json(name = "downlink_ack")
    val downlinkAck: V3ApplicationDownlink? = null,

    @Json(name = "downlink_nack")
    val downlinkNack: V3ApplicationDownlink? = null,

    @Json(name = "downlink_sent")
    val downlinkSent: V3ApplicationDownlink? = null,

    @Json(name = "downlink_failed")
    val downlinkFailed: V3ApplicationDownlinkFailed? = null,

    @Json(name = "downlink_queued")
    val downlinkQueued: V3ApplicationDownlink? = null,

    @Json(name = "downlink_queue_invalidated")
    val downlinkQueueInvalidated: V3ApplicationInvalidatedDownlinks? = null,

    @Json(name = "location_solved")
    val locationSolved: V3ApplicationLocation? = null,

    @Json(name = "service_data")
    val serviceData: V3ApplicationServiceData? = null,

    /* Signals if the message is coming from the Network Server or is simulated. */
    @Json(name = "simulated")
    val simulated: kotlin.Boolean? = null

)

