/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3ApplicationActivationSettings
import org.openapitools.client.models.V3SetApplicationActivationSettingsRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ApplicationActivationSettingRegistryApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Delete deletes application activation settings.
    * 
    * @param applicationIdsApplicationId  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationActivationSettingRegistryDelete(applicationIdsApplicationId: kotlin.String) : kotlin.Any {
        val localVarResponse = applicationActivationSettingRegistryDeleteWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete deletes application activation settings.
    * 
    * @param applicationIdsApplicationId  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationActivationSettingRegistryDeleteWithHttpInfo(applicationIdsApplicationId: kotlin.String) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = applicationActivationSettingRegistryDeleteRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationActivationSettingRegistryDelete
    *
    * @param applicationIdsApplicationId  
    * @return RequestConfig
    */
    fun applicationActivationSettingRegistryDeleteRequestConfig(applicationIdsApplicationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/js/applications/{application_ids.application_id}/settings".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get returns application activation settings.
    * 
    * @param applicationIdsApplicationId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return V3ApplicationActivationSettings
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationActivationSettingRegistryGet(applicationIdsApplicationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : V3ApplicationActivationSettings {
        val localVarResponse = applicationActivationSettingRegistryGetWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, fieldMaskPaths = fieldMaskPaths)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationActivationSettings
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get returns application activation settings.
    * 
    * @param applicationIdsApplicationId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return ApiInfrastructureResponse<V3ApplicationActivationSettings?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationActivationSettingRegistryGetWithHttpInfo(applicationIdsApplicationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : ApiInfrastructureResponse<V3ApplicationActivationSettings?> {
        val localVariableConfig = applicationActivationSettingRegistryGetRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, fieldMaskPaths = fieldMaskPaths)

        return request<Unit, V3ApplicationActivationSettings>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationActivationSettingRegistryGet
    *
    * @param applicationIdsApplicationId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return RequestConfig
    */
    fun applicationActivationSettingRegistryGetRequestConfig(applicationIdsApplicationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/js/applications/{application_ids.application_id}/settings".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set creates or updates application activation settings.
    * 
    * @param applicationIdsApplicationId  
    * @param body  
    * @return V3ApplicationActivationSettings
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationActivationSettingRegistrySet(applicationIdsApplicationId: kotlin.String, body: V3SetApplicationActivationSettingsRequest) : V3ApplicationActivationSettings {
        val localVarResponse = applicationActivationSettingRegistrySetWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationActivationSettings
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set creates or updates application activation settings.
    * 
    * @param applicationIdsApplicationId  
    * @param body  
    * @return ApiInfrastructureResponse<V3ApplicationActivationSettings?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationActivationSettingRegistrySetWithHttpInfo(applicationIdsApplicationId: kotlin.String, body: V3SetApplicationActivationSettingsRequest) : ApiInfrastructureResponse<V3ApplicationActivationSettings?> {
        val localVariableConfig = applicationActivationSettingRegistrySetRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, body = body)

        return request<V3SetApplicationActivationSettingsRequest, V3ApplicationActivationSettings>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationActivationSettingRegistrySet
    *
    * @param applicationIdsApplicationId  
    * @param body  
    * @return RequestConfig
    */
    fun applicationActivationSettingRegistrySetRequestConfig(applicationIdsApplicationId: kotlin.String, body: V3SetApplicationActivationSettingsRequest) : RequestConfig<V3SetApplicationActivationSettingsRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/js/applications/{application_ids.application_id}/settings".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
