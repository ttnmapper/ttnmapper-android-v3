/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.StreamResultOfV3EndDevice
import org.openapitools.client.models.V3EndDevice
import org.openapitools.client.models.V3ProvisionEndDevicesRequest
import org.openapitools.client.models.V3SetEndDeviceRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class JsEndDeviceRegistryApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Delete deletes the device that matches the given identifiers. If there are multiple matches, an error will be returned.
    * 
    * @param applicationIdsApplicationId  
    * @param deviceId  
    * @param devEui The LoRaWAN DevEUI. (optional)
    * @param joinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param devAddr The LoRaWAN DevAddr. (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun jsEndDeviceRegistryDelete(applicationIdsApplicationId: kotlin.String, deviceId: kotlin.String, devEui: kotlin.ByteArray?, joinEui: kotlin.ByteArray?, devAddr: kotlin.ByteArray?) : kotlin.Any {
        val localVarResponse = jsEndDeviceRegistryDeleteWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, deviceId = deviceId, devEui = devEui, joinEui = joinEui, devAddr = devAddr)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete deletes the device that matches the given identifiers. If there are multiple matches, an error will be returned.
    * 
    * @param applicationIdsApplicationId  
    * @param deviceId  
    * @param devEui The LoRaWAN DevEUI. (optional)
    * @param joinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param devAddr The LoRaWAN DevAddr. (optional)
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun jsEndDeviceRegistryDeleteWithHttpInfo(applicationIdsApplicationId: kotlin.String, deviceId: kotlin.String, devEui: kotlin.ByteArray?, joinEui: kotlin.ByteArray?, devAddr: kotlin.ByteArray?) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = jsEndDeviceRegistryDeleteRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, deviceId = deviceId, devEui = devEui, joinEui = joinEui, devAddr = devAddr)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation jsEndDeviceRegistryDelete
    *
    * @param applicationIdsApplicationId  
    * @param deviceId  
    * @param devEui The LoRaWAN DevEUI. (optional)
    * @param joinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param devAddr The LoRaWAN DevAddr. (optional)
    * @return RequestConfig
    */
    fun jsEndDeviceRegistryDeleteRequestConfig(applicationIdsApplicationId: kotlin.String, deviceId: kotlin.String, devEui: kotlin.ByteArray?, joinEui: kotlin.ByteArray?, devAddr: kotlin.ByteArray?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (devEui != null) {
                    put("dev_eui", listOf(devEui.toString()))
                }
                if (joinEui != null) {
                    put("join_eui", listOf(joinEui.toString()))
                }
                if (devAddr != null) {
                    put("dev_addr", listOf(devAddr.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/js/applications/{application_ids.application_id}/devices/{device_id}".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId").replace("{"+"device_id"+"}", "$deviceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get returns the device that matches the given identifiers. If there are multiple matches, an error will be returned.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return V3EndDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun jsEndDeviceRegistryGet(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : V3EndDevice {
        val localVarResponse = jsEndDeviceRegistryGetWithHttpInfo(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, endDeviceIdsDevEui = endDeviceIdsDevEui, endDeviceIdsJoinEui = endDeviceIdsJoinEui, endDeviceIdsDevAddr = endDeviceIdsDevAddr, fieldMaskPaths = fieldMaskPaths)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3EndDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get returns the device that matches the given identifiers. If there are multiple matches, an error will be returned.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return ApiInfrastructureResponse<V3EndDevice?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun jsEndDeviceRegistryGetWithHttpInfo(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : ApiInfrastructureResponse<V3EndDevice?> {
        val localVariableConfig = jsEndDeviceRegistryGetRequestConfig(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, endDeviceIdsDevEui = endDeviceIdsDevEui, endDeviceIdsJoinEui = endDeviceIdsJoinEui, endDeviceIdsDevAddr = endDeviceIdsDevAddr, fieldMaskPaths = fieldMaskPaths)

        return request<Unit, V3EndDevice>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation jsEndDeviceRegistryGet
    *
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return RequestConfig
    */
    fun jsEndDeviceRegistryGetRequestConfig(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (endDeviceIdsDevEui != null) {
                    put("end_device_ids.dev_eui", listOf(endDeviceIdsDevEui.toString()))
                }
                if (endDeviceIdsJoinEui != null) {
                    put("end_device_ids.join_eui", listOf(endDeviceIdsJoinEui.toString()))
                }
                if (endDeviceIdsDevAddr != null) {
                    put("end_device_ids.dev_addr", listOf(endDeviceIdsDevAddr.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/js/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}".replace("{"+"end_device_ids.application_ids.application_id"+"}", "$endDeviceIdsApplicationIdsApplicationId").replace("{"+"end_device_ids.device_id"+"}", "$endDeviceIdsDeviceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * This rpc is deprecated; use EndDeviceTemplateConverter service instead. TODO: Remove (https://github.com/TheThingsNetwork/lorawan-stack/issues/999)
    * 
    * @param applicationIdsApplicationId  
    * @param body  
    * @return StreamResultOfV3EndDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun jsEndDeviceRegistryProvision(applicationIdsApplicationId: kotlin.String, body: V3ProvisionEndDevicesRequest) : StreamResultOfV3EndDevice {
        val localVarResponse = jsEndDeviceRegistryProvisionWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StreamResultOfV3EndDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * This rpc is deprecated; use EndDeviceTemplateConverter service instead. TODO: Remove (https://github.com/TheThingsNetwork/lorawan-stack/issues/999)
    * 
    * @param applicationIdsApplicationId  
    * @param body  
    * @return ApiInfrastructureResponse<StreamResultOfV3EndDevice?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun jsEndDeviceRegistryProvisionWithHttpInfo(applicationIdsApplicationId: kotlin.String, body: V3ProvisionEndDevicesRequest) : ApiInfrastructureResponse<StreamResultOfV3EndDevice?> {
        val localVariableConfig = jsEndDeviceRegistryProvisionRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, body = body)

        return request<V3ProvisionEndDevicesRequest, StreamResultOfV3EndDevice>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation jsEndDeviceRegistryProvision
    *
    * @param applicationIdsApplicationId  
    * @param body  
    * @return RequestConfig
    */
    fun jsEndDeviceRegistryProvisionRequestConfig(applicationIdsApplicationId: kotlin.String, body: V3ProvisionEndDevicesRequest) : RequestConfig<V3ProvisionEndDevicesRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/js/applications/{application_ids.application_id}/provision-devices".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set creates or updates the device.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return V3EndDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun jsEndDeviceRegistrySet(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3SetEndDeviceRequest) : V3EndDevice {
        val localVarResponse = jsEndDeviceRegistrySetWithHttpInfo(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3EndDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set creates or updates the device.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return ApiInfrastructureResponse<V3EndDevice?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun jsEndDeviceRegistrySetWithHttpInfo(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3SetEndDeviceRequest) : ApiInfrastructureResponse<V3EndDevice?> {
        val localVariableConfig = jsEndDeviceRegistrySetRequestConfig(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return request<V3SetEndDeviceRequest, V3EndDevice>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation jsEndDeviceRegistrySet
    *
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return RequestConfig
    */
    fun jsEndDeviceRegistrySetRequestConfig(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3SetEndDeviceRequest) : RequestConfig<V3SetEndDeviceRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/js/applications/{end_device.ids.application_ids.application_id}/devices/{end_device.ids.device_id}".replace("{"+"end_device.ids.application_ids.application_id"+"}", "$endDeviceIdsApplicationIdsApplicationId").replace("{"+"end_device.ids.device_id"+"}", "$endDeviceIdsDeviceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set creates or updates the device.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param body  
    * @return V3EndDevice
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun jsEndDeviceRegistrySet2(endDeviceIdsApplicationIdsApplicationId: kotlin.String, body: V3SetEndDeviceRequest) : V3EndDevice {
        val localVarResponse = jsEndDeviceRegistrySet2WithHttpInfo(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3EndDevice
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set creates or updates the device.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param body  
    * @return ApiInfrastructureResponse<V3EndDevice?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun jsEndDeviceRegistrySet2WithHttpInfo(endDeviceIdsApplicationIdsApplicationId: kotlin.String, body: V3SetEndDeviceRequest) : ApiInfrastructureResponse<V3EndDevice?> {
        val localVariableConfig = jsEndDeviceRegistrySet2RequestConfig(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, body = body)

        return request<V3SetEndDeviceRequest, V3EndDevice>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation jsEndDeviceRegistrySet2
    *
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param body  
    * @return RequestConfig
    */
    fun jsEndDeviceRegistrySet2RequestConfig(endDeviceIdsApplicationIdsApplicationId: kotlin.String, body: V3SetEndDeviceRequest) : RequestConfig<V3SetEndDeviceRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/js/applications/{end_device.ids.application_ids.application_id}/devices".replace("{"+"end_device.ids.application_ids.application_id"+"}", "$endDeviceIdsApplicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
