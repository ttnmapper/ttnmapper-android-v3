/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 *  - SOURCE_UNKNOWN: The source of the location is not known or not set.  - SOURCE_GPS: The location is determined by GPS.  - SOURCE_REGISTRY: The location is set in and updated from a registry.  - SOURCE_IP_GEOLOCATION: The location is estimated with IP geolocation.  - SOURCE_WIFI_RSSI_GEOLOCATION: The location is estimated with WiFi RSSI geolocation.  - SOURCE_BT_RSSI_GEOLOCATION: The location is estimated with BT/BLE RSSI geolocation.  - SOURCE_LORA_RSSI_GEOLOCATION: The location is estimated with LoRa RSSI geolocation.  - SOURCE_LORA_TDOA_GEOLOCATION: The location is estimated with LoRa TDOA geolocation.  - SOURCE_COMBINED_GEOLOCATION: The location is estimated by a combination of geolocation sources.
 *
 * Values: uNKNOWN,gPS,rEGISTRY,iPGEOLOCATION,wIFIRSSIGEOLOCATION,bTRSSIGEOLOCATION,lORARSSIGEOLOCATION,lORATDOAGEOLOCATION,cOMBINEDGEOLOCATION
 */

enum class V3LocationSource(val value: kotlin.String) {

    @Json(name = "SOURCE_UNKNOWN")
    uNKNOWN("SOURCE_UNKNOWN"),

    @Json(name = "SOURCE_GPS")
    gPS("SOURCE_GPS"),

    @Json(name = "SOURCE_REGISTRY")
    rEGISTRY("SOURCE_REGISTRY"),

    @Json(name = "SOURCE_IP_GEOLOCATION")
    iPGEOLOCATION("SOURCE_IP_GEOLOCATION"),

    @Json(name = "SOURCE_WIFI_RSSI_GEOLOCATION")
    wIFIRSSIGEOLOCATION("SOURCE_WIFI_RSSI_GEOLOCATION"),

    @Json(name = "SOURCE_BT_RSSI_GEOLOCATION")
    bTRSSIGEOLOCATION("SOURCE_BT_RSSI_GEOLOCATION"),

    @Json(name = "SOURCE_LORA_RSSI_GEOLOCATION")
    lORARSSIGEOLOCATION("SOURCE_LORA_RSSI_GEOLOCATION"),

    @Json(name = "SOURCE_LORA_TDOA_GEOLOCATION")
    lORATDOAGEOLOCATION("SOURCE_LORA_TDOA_GEOLOCATION"),

    @Json(name = "SOURCE_COMBINED_GEOLOCATION")
    cOMBINEDGEOLOCATION("SOURCE_COMBINED_GEOLOCATION");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is V3LocationSource) "$data" else null

        /**
         * Returns a valid [V3LocationSource] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): V3LocationSource? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

