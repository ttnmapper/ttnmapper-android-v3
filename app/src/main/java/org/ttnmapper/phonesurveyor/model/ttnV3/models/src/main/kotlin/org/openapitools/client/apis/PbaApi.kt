/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3PacketBrokerDefaultGatewayVisibility
import org.openapitools.client.models.V3PacketBrokerDefaultRoutingPolicy
import org.openapitools.client.models.V3PacketBrokerInfo
import org.openapitools.client.models.V3PacketBrokerNetwork
import org.openapitools.client.models.V3PacketBrokerNetworks
import org.openapitools.client.models.V3PacketBrokerRegisterRequest
import org.openapitools.client.models.V3PacketBrokerRoutingPolicies
import org.openapitools.client.models.V3PacketBrokerRoutingPolicy
import org.openapitools.client.models.V3SetPacketBrokerDefaultGatewayVisibilityRequest
import org.openapitools.client.models.V3SetPacketBrokerDefaultRoutingPolicyRequest
import org.openapitools.client.models.V3SetPacketBrokerRoutingPolicyRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class PbaApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Deletes the default gateway visibility. Deleting gateway visibilities requires administrative access.
    * 
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaDeleteHomeNetworkDefaultGatewayVisibility() : kotlin.Any {
        val localVarResponse = pbaDeleteHomeNetworkDefaultGatewayVisibilityWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Deletes the default gateway visibility. Deleting gateway visibilities requires administrative access.
    * 
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaDeleteHomeNetworkDefaultGatewayVisibilityWithHttpInfo() : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaDeleteHomeNetworkDefaultGatewayVisibilityRequestConfig()

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaDeleteHomeNetworkDefaultGatewayVisibility
    *
    * @return RequestConfig
    */
    fun pbaDeleteHomeNetworkDefaultGatewayVisibilityRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/pba/home-networks/gateway-visibilities/default",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Deletes the default routing policy. Deleting routing policies requires administrative access.
    * 
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaDeleteHomeNetworkDefaultRoutingPolicy() : kotlin.Any {
        val localVarResponse = pbaDeleteHomeNetworkDefaultRoutingPolicyWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Deletes the default routing policy. Deleting routing policies requires administrative access.
    * 
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaDeleteHomeNetworkDefaultRoutingPolicyWithHttpInfo() : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaDeleteHomeNetworkDefaultRoutingPolicyRequestConfig()

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaDeleteHomeNetworkDefaultRoutingPolicy
    *
    * @return RequestConfig
    */
    fun pbaDeleteHomeNetworkDefaultRoutingPolicyRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/pba/home-networks/policies/default",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete the routing policy for the given Home Network. Deleting routing policies requires administrative access.
    * 
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaDeleteHomeNetworkRoutingPolicy(netId: kotlin.Long, tenantId: kotlin.String?) : kotlin.Any {
        val localVarResponse = pbaDeleteHomeNetworkRoutingPolicyWithHttpInfo(netId = netId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete the routing policy for the given Home Network. Deleting routing policies requires administrative access.
    * 
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. (optional)
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaDeleteHomeNetworkRoutingPolicyWithHttpInfo(netId: kotlin.Long, tenantId: kotlin.String?) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaDeleteHomeNetworkRoutingPolicyRequestConfig(netId = netId, tenantId = tenantId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaDeleteHomeNetworkRoutingPolicy
    *
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. (optional)
    * @return RequestConfig
    */
    fun pbaDeleteHomeNetworkRoutingPolicyRequestConfig(netId: kotlin.Long, tenantId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (tenantId != null) {
                    put("tenant_id", listOf(tenantId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/pba/home-networks/policies/{net_id}".replace("{"+"net_id"+"}", "$netId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete the routing policy for the given Home Network. Deleting routing policies requires administrative access.
    * 
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaDeleteHomeNetworkRoutingPolicy2(netId: kotlin.Long, tenantId: kotlin.String) : kotlin.Any {
        val localVarResponse = pbaDeleteHomeNetworkRoutingPolicy2WithHttpInfo(netId = netId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete the routing policy for the given Home Network. Deleting routing policies requires administrative access.
    * 
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaDeleteHomeNetworkRoutingPolicy2WithHttpInfo(netId: kotlin.Long, tenantId: kotlin.String) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaDeleteHomeNetworkRoutingPolicy2RequestConfig(netId = netId, tenantId = tenantId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaDeleteHomeNetworkRoutingPolicy2
    *
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @return RequestConfig
    */
    fun pbaDeleteHomeNetworkRoutingPolicy2RequestConfig(netId: kotlin.Long, tenantId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/pba/home-networks/policies/{net_id}/{tenant_id}".replace("{"+"net_id"+"}", "$netId").replace("{"+"tenant_id"+"}", "$tenantId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Deregister from Packet Broker. Packet Broker deregistration requires administrative access. Packet Broker deregistration is only supported for tenants and requires Packet Broker Agent to be configured with NetID level authentication. Use rpc GetInfo and check register_enabled to check whether this rpc is enabled.
    * 
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaDeregister() : kotlin.Any {
        val localVarResponse = pbaDeregisterWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Deregister from Packet Broker. Packet Broker deregistration requires administrative access. Packet Broker deregistration is only supported for tenants and requires Packet Broker Agent to be configured with NetID level authentication. Use rpc GetInfo and check register_enabled to check whether this rpc is enabled.
    * 
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaDeregisterWithHttpInfo() : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaDeregisterRequestConfig()

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaDeregister
    *
    * @return RequestConfig
    */
    fun pbaDeregisterRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/pba/registration",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the default gateway visibility. Getting gateway visibilities requires administrative access.
    * 
    * @return V3PacketBrokerDefaultGatewayVisibility
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaGetHomeNetworkDefaultGatewayVisibility() : V3PacketBrokerDefaultGatewayVisibility {
        val localVarResponse = pbaGetHomeNetworkDefaultGatewayVisibilityWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3PacketBrokerDefaultGatewayVisibility
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the default gateway visibility. Getting gateway visibilities requires administrative access.
    * 
    * @return ApiInfrastructureResponse<V3PacketBrokerDefaultGatewayVisibility?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaGetHomeNetworkDefaultGatewayVisibilityWithHttpInfo() : ApiInfrastructureResponse<V3PacketBrokerDefaultGatewayVisibility?> {
        val localVariableConfig = pbaGetHomeNetworkDefaultGatewayVisibilityRequestConfig()

        return request<Unit, V3PacketBrokerDefaultGatewayVisibility>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaGetHomeNetworkDefaultGatewayVisibility
    *
    * @return RequestConfig
    */
    fun pbaGetHomeNetworkDefaultGatewayVisibilityRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pba/home-networks/gateway-visibilities/default",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the default routing policy. Getting routing policies requires administrative access.
    * 
    * @return V3PacketBrokerDefaultRoutingPolicy
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaGetHomeNetworkDefaultRoutingPolicy() : V3PacketBrokerDefaultRoutingPolicy {
        val localVarResponse = pbaGetHomeNetworkDefaultRoutingPolicyWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3PacketBrokerDefaultRoutingPolicy
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the default routing policy. Getting routing policies requires administrative access.
    * 
    * @return ApiInfrastructureResponse<V3PacketBrokerDefaultRoutingPolicy?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaGetHomeNetworkDefaultRoutingPolicyWithHttpInfo() : ApiInfrastructureResponse<V3PacketBrokerDefaultRoutingPolicy?> {
        val localVariableConfig = pbaGetHomeNetworkDefaultRoutingPolicyRequestConfig()

        return request<Unit, V3PacketBrokerDefaultRoutingPolicy>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaGetHomeNetworkDefaultRoutingPolicy
    *
    * @return RequestConfig
    */
    fun pbaGetHomeNetworkDefaultRoutingPolicyRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pba/home-networks/policies/default",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the routing policy for the given Home Network. Getting routing policies requires administrative access.
    * 
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. (optional)
    * @return V3PacketBrokerRoutingPolicy
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaGetHomeNetworkRoutingPolicy(netId: kotlin.Long, tenantId: kotlin.String?) : V3PacketBrokerRoutingPolicy {
        val localVarResponse = pbaGetHomeNetworkRoutingPolicyWithHttpInfo(netId = netId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3PacketBrokerRoutingPolicy
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the routing policy for the given Home Network. Getting routing policies requires administrative access.
    * 
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. (optional)
    * @return ApiInfrastructureResponse<V3PacketBrokerRoutingPolicy?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaGetHomeNetworkRoutingPolicyWithHttpInfo(netId: kotlin.Long, tenantId: kotlin.String?) : ApiInfrastructureResponse<V3PacketBrokerRoutingPolicy?> {
        val localVariableConfig = pbaGetHomeNetworkRoutingPolicyRequestConfig(netId = netId, tenantId = tenantId)

        return request<Unit, V3PacketBrokerRoutingPolicy>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaGetHomeNetworkRoutingPolicy
    *
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. (optional)
    * @return RequestConfig
    */
    fun pbaGetHomeNetworkRoutingPolicyRequestConfig(netId: kotlin.Long, tenantId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (tenantId != null) {
                    put("tenant_id", listOf(tenantId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pba/home-networks/policies/{net_id}".replace("{"+"net_id"+"}", "$netId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the routing policy for the given Home Network. Getting routing policies requires administrative access.
    * 
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @return V3PacketBrokerRoutingPolicy
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaGetHomeNetworkRoutingPolicy2(netId: kotlin.Long, tenantId: kotlin.String) : V3PacketBrokerRoutingPolicy {
        val localVarResponse = pbaGetHomeNetworkRoutingPolicy2WithHttpInfo(netId = netId, tenantId = tenantId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3PacketBrokerRoutingPolicy
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the routing policy for the given Home Network. Getting routing policies requires administrative access.
    * 
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @return ApiInfrastructureResponse<V3PacketBrokerRoutingPolicy?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaGetHomeNetworkRoutingPolicy2WithHttpInfo(netId: kotlin.Long, tenantId: kotlin.String) : ApiInfrastructureResponse<V3PacketBrokerRoutingPolicy?> {
        val localVariableConfig = pbaGetHomeNetworkRoutingPolicy2RequestConfig(netId = netId, tenantId = tenantId)

        return request<Unit, V3PacketBrokerRoutingPolicy>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaGetHomeNetworkRoutingPolicy2
    *
    * @param netId LoRa Alliance NetID. 
    * @param tenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @return RequestConfig
    */
    fun pbaGetHomeNetworkRoutingPolicy2RequestConfig(netId: kotlin.Long, tenantId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pba/home-networks/policies/{net_id}/{tenant_id}".replace("{"+"net_id"+"}", "$netId").replace("{"+"tenant_id"+"}", "$tenantId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get information about the Packet Broker registration. Viewing Packet Packet information requires administrative access.
    * 
    * @return V3PacketBrokerInfo
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaGetInfo() : V3PacketBrokerInfo {
        val localVarResponse = pbaGetInfoWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3PacketBrokerInfo
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get information about the Packet Broker registration. Viewing Packet Packet information requires administrative access.
    * 
    * @return ApiInfrastructureResponse<V3PacketBrokerInfo?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaGetInfoWithHttpInfo() : ApiInfrastructureResponse<V3PacketBrokerInfo?> {
        val localVariableConfig = pbaGetInfoRequestConfig()

        return request<Unit, V3PacketBrokerInfo>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaGetInfo
    *
    * @return RequestConfig
    */
    fun pbaGetInfoRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pba/info",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the routing policies that Forwarders configured with Packet Broker Agent as Home Network. Listing routing policies requires administrative access.
    * 
    * @param homeNetworkIdNetId LoRa Alliance NetID. (optional)
    * @param homeNetworkIdTenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return V3PacketBrokerRoutingPolicies
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaListForwarderRoutingPolicies(homeNetworkIdNetId: kotlin.Long?, homeNetworkIdTenantId: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?) : V3PacketBrokerRoutingPolicies {
        val localVarResponse = pbaListForwarderRoutingPoliciesWithHttpInfo(homeNetworkIdNetId = homeNetworkIdNetId, homeNetworkIdTenantId = homeNetworkIdTenantId, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3PacketBrokerRoutingPolicies
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the routing policies that Forwarders configured with Packet Broker Agent as Home Network. Listing routing policies requires administrative access.
    * 
    * @param homeNetworkIdNetId LoRa Alliance NetID. (optional)
    * @param homeNetworkIdTenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return ApiInfrastructureResponse<V3PacketBrokerRoutingPolicies?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaListForwarderRoutingPoliciesWithHttpInfo(homeNetworkIdNetId: kotlin.Long?, homeNetworkIdTenantId: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?) : ApiInfrastructureResponse<V3PacketBrokerRoutingPolicies?> {
        val localVariableConfig = pbaListForwarderRoutingPoliciesRequestConfig(homeNetworkIdNetId = homeNetworkIdNetId, homeNetworkIdTenantId = homeNetworkIdTenantId, limit = limit, page = page)

        return request<Unit, V3PacketBrokerRoutingPolicies>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaListForwarderRoutingPolicies
    *
    * @param homeNetworkIdNetId LoRa Alliance NetID. (optional)
    * @param homeNetworkIdTenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return RequestConfig
    */
    fun pbaListForwarderRoutingPoliciesRequestConfig(homeNetworkIdNetId: kotlin.Long?, homeNetworkIdTenantId: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (homeNetworkIdNetId != null) {
                    put("home_network_id.net_id", listOf(homeNetworkIdNetId.toString()))
                }
                if (homeNetworkIdTenantId != null) {
                    put("home_network_id.tenant_id", listOf(homeNetworkIdTenantId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pba/forwarders/policies",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the routing policies that Packet Broker Agent as Forwarder configured with Home Networks. Listing routing policies requires administrative access.
    * 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return V3PacketBrokerRoutingPolicies
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaListHomeNetworkRoutingPolicies(limit: kotlin.Long?, page: kotlin.Long?) : V3PacketBrokerRoutingPolicies {
        val localVarResponse = pbaListHomeNetworkRoutingPoliciesWithHttpInfo(limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3PacketBrokerRoutingPolicies
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the routing policies that Packet Broker Agent as Forwarder configured with Home Networks. Listing routing policies requires administrative access.
    * 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return ApiInfrastructureResponse<V3PacketBrokerRoutingPolicies?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaListHomeNetworkRoutingPoliciesWithHttpInfo(limit: kotlin.Long?, page: kotlin.Long?) : ApiInfrastructureResponse<V3PacketBrokerRoutingPolicies?> {
        val localVariableConfig = pbaListHomeNetworkRoutingPoliciesRequestConfig(limit = limit, page = page)

        return request<Unit, V3PacketBrokerRoutingPolicies>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaListHomeNetworkRoutingPolicies
    *
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return RequestConfig
    */
    fun pbaListHomeNetworkRoutingPoliciesRequestConfig(limit: kotlin.Long?, page: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pba/home-networks/policies",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the listed home networks for which routing policies can be configured. Listing home networks requires administrative access.
    * 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param tenantIdContains Filter by tenant ID. (optional)
    * @param nameContains Filter by name. (optional)
    * @return V3PacketBrokerNetworks
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaListHomeNetworks(limit: kotlin.Long?, page: kotlin.Long?, tenantIdContains: kotlin.String?, nameContains: kotlin.String?) : V3PacketBrokerNetworks {
        val localVarResponse = pbaListHomeNetworksWithHttpInfo(limit = limit, page = page, tenantIdContains = tenantIdContains, nameContains = nameContains)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3PacketBrokerNetworks
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the listed home networks for which routing policies can be configured. Listing home networks requires administrative access.
    * 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param tenantIdContains Filter by tenant ID. (optional)
    * @param nameContains Filter by name. (optional)
    * @return ApiInfrastructureResponse<V3PacketBrokerNetworks?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaListHomeNetworksWithHttpInfo(limit: kotlin.Long?, page: kotlin.Long?, tenantIdContains: kotlin.String?, nameContains: kotlin.String?) : ApiInfrastructureResponse<V3PacketBrokerNetworks?> {
        val localVariableConfig = pbaListHomeNetworksRequestConfig(limit = limit, page = page, tenantIdContains = tenantIdContains, nameContains = nameContains)

        return request<Unit, V3PacketBrokerNetworks>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaListHomeNetworks
    *
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param tenantIdContains Filter by tenant ID. (optional)
    * @param nameContains Filter by name. (optional)
    * @return RequestConfig
    */
    fun pbaListHomeNetworksRequestConfig(limit: kotlin.Long?, page: kotlin.Long?, tenantIdContains: kotlin.String?, nameContains: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (tenantIdContains != null) {
                    put("tenant_id_contains", listOf(tenantIdContains.toString()))
                }
                if (nameContains != null) {
                    put("name_contains", listOf(nameContains.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pba/home-networks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List all listed networks. Listing networks requires administrative access.
    * 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param withRoutingPolicy If true, list only the Forwarders and Home Networks with whom a routing policy has been defined in either direction. (optional)
    * @param tenantIdContains Filter by tenant ID. (optional)
    * @param nameContains Filter by name. (optional)
    * @return V3PacketBrokerNetworks
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaListNetworks(limit: kotlin.Long?, page: kotlin.Long?, withRoutingPolicy: kotlin.Boolean?, tenantIdContains: kotlin.String?, nameContains: kotlin.String?) : V3PacketBrokerNetworks {
        val localVarResponse = pbaListNetworksWithHttpInfo(limit = limit, page = page, withRoutingPolicy = withRoutingPolicy, tenantIdContains = tenantIdContains, nameContains = nameContains)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3PacketBrokerNetworks
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List all listed networks. Listing networks requires administrative access.
    * 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param withRoutingPolicy If true, list only the Forwarders and Home Networks with whom a routing policy has been defined in either direction. (optional)
    * @param tenantIdContains Filter by tenant ID. (optional)
    * @param nameContains Filter by name. (optional)
    * @return ApiInfrastructureResponse<V3PacketBrokerNetworks?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaListNetworksWithHttpInfo(limit: kotlin.Long?, page: kotlin.Long?, withRoutingPolicy: kotlin.Boolean?, tenantIdContains: kotlin.String?, nameContains: kotlin.String?) : ApiInfrastructureResponse<V3PacketBrokerNetworks?> {
        val localVariableConfig = pbaListNetworksRequestConfig(limit = limit, page = page, withRoutingPolicy = withRoutingPolicy, tenantIdContains = tenantIdContains, nameContains = nameContains)

        return request<Unit, V3PacketBrokerNetworks>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaListNetworks
    *
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param withRoutingPolicy If true, list only the Forwarders and Home Networks with whom a routing policy has been defined in either direction. (optional)
    * @param tenantIdContains Filter by tenant ID. (optional)
    * @param nameContains Filter by name. (optional)
    * @return RequestConfig
    */
    fun pbaListNetworksRequestConfig(limit: kotlin.Long?, page: kotlin.Long?, withRoutingPolicy: kotlin.Boolean?, tenantIdContains: kotlin.String?, nameContains: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (withRoutingPolicy != null) {
                    put("with_routing_policy", listOf(withRoutingPolicy.toString()))
                }
                if (tenantIdContains != null) {
                    put("tenant_id_contains", listOf(tenantIdContains.toString()))
                }
                if (nameContains != null) {
                    put("name_contains", listOf(nameContains.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pba/networks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Register with Packet Broker. If no registration exists, it will be created. Any existing registration will be updated. Registration settings not in the request message are taken from Packet Broker Agent configuration and caller context. Packet Broker registration requires administrative access. Packet Broker registration is only supported for tenants and requires Packet Broker Agent to be configured with NetID level authentication. Use rpc GetInfo and check register_enabled to check whether this rpc is enabled.
    * 
    * @param body  
    * @return V3PacketBrokerNetwork
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaRegister(body: V3PacketBrokerRegisterRequest) : V3PacketBrokerNetwork {
        val localVarResponse = pbaRegisterWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3PacketBrokerNetwork
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Register with Packet Broker. If no registration exists, it will be created. Any existing registration will be updated. Registration settings not in the request message are taken from Packet Broker Agent configuration and caller context. Packet Broker registration requires administrative access. Packet Broker registration is only supported for tenants and requires Packet Broker Agent to be configured with NetID level authentication. Use rpc GetInfo and check register_enabled to check whether this rpc is enabled.
    * 
    * @param body  
    * @return ApiInfrastructureResponse<V3PacketBrokerNetwork?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaRegisterWithHttpInfo(body: V3PacketBrokerRegisterRequest) : ApiInfrastructureResponse<V3PacketBrokerNetwork?> {
        val localVariableConfig = pbaRegisterRequestConfig(body = body)

        return request<V3PacketBrokerRegisterRequest, V3PacketBrokerNetwork>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaRegister
    *
    * @param body  
    * @return RequestConfig
    */
    fun pbaRegisterRequestConfig(body: V3PacketBrokerRegisterRequest) : RequestConfig<V3PacketBrokerRegisterRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/pba/registration",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Register with Packet Broker. If no registration exists, it will be created. Any existing registration will be updated. Registration settings not in the request message are taken from Packet Broker Agent configuration and caller context. Packet Broker registration requires administrative access. Packet Broker registration is only supported for tenants and requires Packet Broker Agent to be configured with NetID level authentication. Use rpc GetInfo and check register_enabled to check whether this rpc is enabled.
    * 
    * @param body  
    * @return V3PacketBrokerNetwork
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaRegister2(body: V3PacketBrokerRegisterRequest) : V3PacketBrokerNetwork {
        val localVarResponse = pbaRegister2WithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3PacketBrokerNetwork
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Register with Packet Broker. If no registration exists, it will be created. Any existing registration will be updated. Registration settings not in the request message are taken from Packet Broker Agent configuration and caller context. Packet Broker registration requires administrative access. Packet Broker registration is only supported for tenants and requires Packet Broker Agent to be configured with NetID level authentication. Use rpc GetInfo and check register_enabled to check whether this rpc is enabled.
    * 
    * @param body  
    * @return ApiInfrastructureResponse<V3PacketBrokerNetwork?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaRegister2WithHttpInfo(body: V3PacketBrokerRegisterRequest) : ApiInfrastructureResponse<V3PacketBrokerNetwork?> {
        val localVariableConfig = pbaRegister2RequestConfig(body = body)

        return request<V3PacketBrokerRegisterRequest, V3PacketBrokerNetwork>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaRegister2
    *
    * @param body  
    * @return RequestConfig
    */
    fun pbaRegister2RequestConfig(body: V3PacketBrokerRegisterRequest) : RequestConfig<V3PacketBrokerRegisterRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/pba/registration",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set the default gateway visibility. Setting gateway visibilities requires administrative access.
    * 
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkDefaultGatewayVisibility(body: V3SetPacketBrokerDefaultGatewayVisibilityRequest) : kotlin.Any {
        val localVarResponse = pbaSetHomeNetworkDefaultGatewayVisibilityWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set the default gateway visibility. Setting gateway visibilities requires administrative access.
    * 
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkDefaultGatewayVisibilityWithHttpInfo(body: V3SetPacketBrokerDefaultGatewayVisibilityRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaSetHomeNetworkDefaultGatewayVisibilityRequestConfig(body = body)

        return request<V3SetPacketBrokerDefaultGatewayVisibilityRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaSetHomeNetworkDefaultGatewayVisibility
    *
    * @param body  
    * @return RequestConfig
    */
    fun pbaSetHomeNetworkDefaultGatewayVisibilityRequestConfig(body: V3SetPacketBrokerDefaultGatewayVisibilityRequest) : RequestConfig<V3SetPacketBrokerDefaultGatewayVisibilityRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/pba/home-networks/gateway-visibilities/default",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set the default gateway visibility. Setting gateway visibilities requires administrative access.
    * 
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkDefaultGatewayVisibility2(body: V3SetPacketBrokerDefaultGatewayVisibilityRequest) : kotlin.Any {
        val localVarResponse = pbaSetHomeNetworkDefaultGatewayVisibility2WithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set the default gateway visibility. Setting gateway visibilities requires administrative access.
    * 
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkDefaultGatewayVisibility2WithHttpInfo(body: V3SetPacketBrokerDefaultGatewayVisibilityRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaSetHomeNetworkDefaultGatewayVisibility2RequestConfig(body = body)

        return request<V3SetPacketBrokerDefaultGatewayVisibilityRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaSetHomeNetworkDefaultGatewayVisibility2
    *
    * @param body  
    * @return RequestConfig
    */
    fun pbaSetHomeNetworkDefaultGatewayVisibility2RequestConfig(body: V3SetPacketBrokerDefaultGatewayVisibilityRequest) : RequestConfig<V3SetPacketBrokerDefaultGatewayVisibilityRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/pba/home-networks/gateway-visibilities/default",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set the default routing policy. Setting routing policies requires administrative access.
    * 
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkDefaultRoutingPolicy(body: V3SetPacketBrokerDefaultRoutingPolicyRequest) : kotlin.Any {
        val localVarResponse = pbaSetHomeNetworkDefaultRoutingPolicyWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set the default routing policy. Setting routing policies requires administrative access.
    * 
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkDefaultRoutingPolicyWithHttpInfo(body: V3SetPacketBrokerDefaultRoutingPolicyRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaSetHomeNetworkDefaultRoutingPolicyRequestConfig(body = body)

        return request<V3SetPacketBrokerDefaultRoutingPolicyRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaSetHomeNetworkDefaultRoutingPolicy
    *
    * @param body  
    * @return RequestConfig
    */
    fun pbaSetHomeNetworkDefaultRoutingPolicyRequestConfig(body: V3SetPacketBrokerDefaultRoutingPolicyRequest) : RequestConfig<V3SetPacketBrokerDefaultRoutingPolicyRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/pba/home-networks/policies/default",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set the default routing policy. Setting routing policies requires administrative access.
    * 
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkDefaultRoutingPolicy2(body: V3SetPacketBrokerDefaultRoutingPolicyRequest) : kotlin.Any {
        val localVarResponse = pbaSetHomeNetworkDefaultRoutingPolicy2WithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set the default routing policy. Setting routing policies requires administrative access.
    * 
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkDefaultRoutingPolicy2WithHttpInfo(body: V3SetPacketBrokerDefaultRoutingPolicyRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaSetHomeNetworkDefaultRoutingPolicy2RequestConfig(body = body)

        return request<V3SetPacketBrokerDefaultRoutingPolicyRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaSetHomeNetworkDefaultRoutingPolicy2
    *
    * @param body  
    * @return RequestConfig
    */
    fun pbaSetHomeNetworkDefaultRoutingPolicy2RequestConfig(body: V3SetPacketBrokerDefaultRoutingPolicyRequest) : RequestConfig<V3SetPacketBrokerDefaultRoutingPolicyRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/pba/home-networks/policies/default",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set the routing policy for the given Home Network. Setting routing policies requires administrative access.
    * 
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkRoutingPolicy(homeNetworkIdNetId: kotlin.Long, body: V3SetPacketBrokerRoutingPolicyRequest) : kotlin.Any {
        val localVarResponse = pbaSetHomeNetworkRoutingPolicyWithHttpInfo(homeNetworkIdNetId = homeNetworkIdNetId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set the routing policy for the given Home Network. Setting routing policies requires administrative access.
    * 
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkRoutingPolicyWithHttpInfo(homeNetworkIdNetId: kotlin.Long, body: V3SetPacketBrokerRoutingPolicyRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaSetHomeNetworkRoutingPolicyRequestConfig(homeNetworkIdNetId = homeNetworkIdNetId, body = body)

        return request<V3SetPacketBrokerRoutingPolicyRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaSetHomeNetworkRoutingPolicy
    *
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param body  
    * @return RequestConfig
    */
    fun pbaSetHomeNetworkRoutingPolicyRequestConfig(homeNetworkIdNetId: kotlin.Long, body: V3SetPacketBrokerRoutingPolicyRequest) : RequestConfig<V3SetPacketBrokerRoutingPolicyRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/pba/home-networks/policies/{home_network_id.net_id}".replace("{"+"home_network_id.net_id"+"}", "$homeNetworkIdNetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set the routing policy for the given Home Network. Setting routing policies requires administrative access.
    * 
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkRoutingPolicy2(homeNetworkIdNetId: kotlin.Long, body: V3SetPacketBrokerRoutingPolicyRequest) : kotlin.Any {
        val localVarResponse = pbaSetHomeNetworkRoutingPolicy2WithHttpInfo(homeNetworkIdNetId = homeNetworkIdNetId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set the routing policy for the given Home Network. Setting routing policies requires administrative access.
    * 
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkRoutingPolicy2WithHttpInfo(homeNetworkIdNetId: kotlin.Long, body: V3SetPacketBrokerRoutingPolicyRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaSetHomeNetworkRoutingPolicy2RequestConfig(homeNetworkIdNetId = homeNetworkIdNetId, body = body)

        return request<V3SetPacketBrokerRoutingPolicyRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaSetHomeNetworkRoutingPolicy2
    *
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param body  
    * @return RequestConfig
    */
    fun pbaSetHomeNetworkRoutingPolicy2RequestConfig(homeNetworkIdNetId: kotlin.Long, body: V3SetPacketBrokerRoutingPolicyRequest) : RequestConfig<V3SetPacketBrokerRoutingPolicyRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/pba/home-networks/policies/{home_network_id.net_id}".replace("{"+"home_network_id.net_id"+"}", "$homeNetworkIdNetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set the routing policy for the given Home Network. Setting routing policies requires administrative access.
    * 
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param homeNetworkIdTenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkRoutingPolicy3(homeNetworkIdNetId: kotlin.Long, homeNetworkIdTenantId: kotlin.String, body: V3SetPacketBrokerRoutingPolicyRequest) : kotlin.Any {
        val localVarResponse = pbaSetHomeNetworkRoutingPolicy3WithHttpInfo(homeNetworkIdNetId = homeNetworkIdNetId, homeNetworkIdTenantId = homeNetworkIdTenantId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set the routing policy for the given Home Network. Setting routing policies requires administrative access.
    * 
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param homeNetworkIdTenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkRoutingPolicy3WithHttpInfo(homeNetworkIdNetId: kotlin.Long, homeNetworkIdTenantId: kotlin.String, body: V3SetPacketBrokerRoutingPolicyRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaSetHomeNetworkRoutingPolicy3RequestConfig(homeNetworkIdNetId = homeNetworkIdNetId, homeNetworkIdTenantId = homeNetworkIdTenantId, body = body)

        return request<V3SetPacketBrokerRoutingPolicyRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaSetHomeNetworkRoutingPolicy3
    *
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param homeNetworkIdTenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @param body  
    * @return RequestConfig
    */
    fun pbaSetHomeNetworkRoutingPolicy3RequestConfig(homeNetworkIdNetId: kotlin.Long, homeNetworkIdTenantId: kotlin.String, body: V3SetPacketBrokerRoutingPolicyRequest) : RequestConfig<V3SetPacketBrokerRoutingPolicyRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/pba/home-networks/policies/{home_network_id.net_id}/{home_network_id.tenant_id}".replace("{"+"home_network_id.net_id"+"}", "$homeNetworkIdNetId").replace("{"+"home_network_id.tenant_id"+"}", "$homeNetworkIdTenantId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set the routing policy for the given Home Network. Setting routing policies requires administrative access.
    * 
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param homeNetworkIdTenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkRoutingPolicy4(homeNetworkIdNetId: kotlin.Long, homeNetworkIdTenantId: kotlin.String, body: V3SetPacketBrokerRoutingPolicyRequest) : kotlin.Any {
        val localVarResponse = pbaSetHomeNetworkRoutingPolicy4WithHttpInfo(homeNetworkIdNetId = homeNetworkIdNetId, homeNetworkIdTenantId = homeNetworkIdTenantId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set the routing policy for the given Home Network. Setting routing policies requires administrative access.
    * 
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param homeNetworkIdTenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun pbaSetHomeNetworkRoutingPolicy4WithHttpInfo(homeNetworkIdNetId: kotlin.Long, homeNetworkIdTenantId: kotlin.String, body: V3SetPacketBrokerRoutingPolicyRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = pbaSetHomeNetworkRoutingPolicy4RequestConfig(homeNetworkIdNetId = homeNetworkIdNetId, homeNetworkIdTenantId = homeNetworkIdTenantId, body = body)

        return request<V3SetPacketBrokerRoutingPolicyRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pbaSetHomeNetworkRoutingPolicy4
    *
    * @param homeNetworkIdNetId LoRa Alliance NetID. 
    * @param homeNetworkIdTenantId Tenant identifier if the registration leases DevAddr blocks from a NetID. 
    * @param body  
    * @return RequestConfig
    */
    fun pbaSetHomeNetworkRoutingPolicy4RequestConfig(homeNetworkIdNetId: kotlin.Long, homeNetworkIdTenantId: kotlin.String, body: V3SetPacketBrokerRoutingPolicyRequest) : RequestConfig<V3SetPacketBrokerRoutingPolicyRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/pba/home-networks/policies/{home_network_id.net_id}/{home_network_id.tenant_id}".replace("{"+"home_network_id.net_id"+"}", "$homeNetworkIdNetId").replace("{"+"home_network_id.tenant_id"+"}", "$homeNetworkIdTenantId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
