/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3ApplicationWebhook
import org.openapitools.client.models.V3ApplicationWebhookFormats
import org.openapitools.client.models.V3ApplicationWebhookTemplate
import org.openapitools.client.models.V3ApplicationWebhookTemplates
import org.openapitools.client.models.V3ApplicationWebhooks
import org.openapitools.client.models.V3SetApplicationWebhookRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ApplicationWebhookRegistryApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param applicationIdsApplicationId  
    * @param webhookId  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryDelete(applicationIdsApplicationId: kotlin.String, webhookId: kotlin.String) : kotlin.Any {
        val localVarResponse = applicationWebhookRegistryDeleteWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, webhookId = webhookId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param applicationIdsApplicationId  
    * @param webhookId  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryDeleteWithHttpInfo(applicationIdsApplicationId: kotlin.String, webhookId: kotlin.String) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = applicationWebhookRegistryDeleteRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, webhookId = webhookId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationWebhookRegistryDelete
    *
    * @param applicationIdsApplicationId  
    * @param webhookId  
    * @return RequestConfig
    */
    fun applicationWebhookRegistryDeleteRequestConfig(applicationIdsApplicationId: kotlin.String, webhookId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/as/webhooks/{application_ids.application_id}/{webhook_id}".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId").replace("{"+"webhook_id"+"}", "$webhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param idsApplicationIdsApplicationId  
    * @param idsWebhookId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return V3ApplicationWebhook
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryGet(idsApplicationIdsApplicationId: kotlin.String, idsWebhookId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : V3ApplicationWebhook {
        val localVarResponse = applicationWebhookRegistryGetWithHttpInfo(idsApplicationIdsApplicationId = idsApplicationIdsApplicationId, idsWebhookId = idsWebhookId, fieldMaskPaths = fieldMaskPaths)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationWebhook
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param idsApplicationIdsApplicationId  
    * @param idsWebhookId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return ApiInfrastructureResponse<V3ApplicationWebhook?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryGetWithHttpInfo(idsApplicationIdsApplicationId: kotlin.String, idsWebhookId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : ApiInfrastructureResponse<V3ApplicationWebhook?> {
        val localVariableConfig = applicationWebhookRegistryGetRequestConfig(idsApplicationIdsApplicationId = idsApplicationIdsApplicationId, idsWebhookId = idsWebhookId, fieldMaskPaths = fieldMaskPaths)

        return request<Unit, V3ApplicationWebhook>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationWebhookRegistryGet
    *
    * @param idsApplicationIdsApplicationId  
    * @param idsWebhookId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return RequestConfig
    */
    fun applicationWebhookRegistryGetRequestConfig(idsApplicationIdsApplicationId: kotlin.String, idsWebhookId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/webhooks/{ids.application_ids.application_id}/{ids.webhook_id}".replace("{"+"ids.application_ids.application_id"+"}", "$idsApplicationIdsApplicationId").replace("{"+"ids.webhook_id"+"}", "$idsWebhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return V3ApplicationWebhookFormats
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryGetFormats() : V3ApplicationWebhookFormats {
        val localVarResponse = applicationWebhookRegistryGetFormatsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationWebhookFormats
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiInfrastructureResponse<V3ApplicationWebhookFormats?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryGetFormatsWithHttpInfo() : ApiInfrastructureResponse<V3ApplicationWebhookFormats?> {
        val localVariableConfig = applicationWebhookRegistryGetFormatsRequestConfig()

        return request<Unit, V3ApplicationWebhookFormats>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationWebhookRegistryGetFormats
    *
    * @return RequestConfig
    */
    fun applicationWebhookRegistryGetFormatsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/webhook-formats",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param idsTemplateId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return V3ApplicationWebhookTemplate
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryGetTemplate(idsTemplateId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : V3ApplicationWebhookTemplate {
        val localVarResponse = applicationWebhookRegistryGetTemplateWithHttpInfo(idsTemplateId = idsTemplateId, fieldMaskPaths = fieldMaskPaths)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationWebhookTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param idsTemplateId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return ApiInfrastructureResponse<V3ApplicationWebhookTemplate?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryGetTemplateWithHttpInfo(idsTemplateId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : ApiInfrastructureResponse<V3ApplicationWebhookTemplate?> {
        val localVariableConfig = applicationWebhookRegistryGetTemplateRequestConfig(idsTemplateId = idsTemplateId, fieldMaskPaths = fieldMaskPaths)

        return request<Unit, V3ApplicationWebhookTemplate>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationWebhookRegistryGetTemplate
    *
    * @param idsTemplateId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return RequestConfig
    */
    fun applicationWebhookRegistryGetTemplateRequestConfig(idsTemplateId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/webhook-templates/{ids.template_id}".replace("{"+"ids.template_id"+"}", "$idsTemplateId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param applicationIdsApplicationId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return V3ApplicationWebhooks
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryList(applicationIdsApplicationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : V3ApplicationWebhooks {
        val localVarResponse = applicationWebhookRegistryListWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, fieldMaskPaths = fieldMaskPaths)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationWebhooks
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param applicationIdsApplicationId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return ApiInfrastructureResponse<V3ApplicationWebhooks?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryListWithHttpInfo(applicationIdsApplicationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : ApiInfrastructureResponse<V3ApplicationWebhooks?> {
        val localVariableConfig = applicationWebhookRegistryListRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, fieldMaskPaths = fieldMaskPaths)

        return request<Unit, V3ApplicationWebhooks>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationWebhookRegistryList
    *
    * @param applicationIdsApplicationId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return RequestConfig
    */
    fun applicationWebhookRegistryListRequestConfig(applicationIdsApplicationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/webhooks/{application_ids.application_id}".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return V3ApplicationWebhookTemplates
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryListTemplates(fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : V3ApplicationWebhookTemplates {
        val localVarResponse = applicationWebhookRegistryListTemplatesWithHttpInfo(fieldMaskPaths = fieldMaskPaths)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationWebhookTemplates
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return ApiInfrastructureResponse<V3ApplicationWebhookTemplates?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistryListTemplatesWithHttpInfo(fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : ApiInfrastructureResponse<V3ApplicationWebhookTemplates?> {
        val localVariableConfig = applicationWebhookRegistryListTemplatesRequestConfig(fieldMaskPaths = fieldMaskPaths)

        return request<Unit, V3ApplicationWebhookTemplates>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationWebhookRegistryListTemplates
    *
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return RequestConfig
    */
    fun applicationWebhookRegistryListTemplatesRequestConfig(fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/webhook-templates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param webhookIdsApplicationIdsApplicationId  
    * @param webhookIdsWebhookId  
    * @param body  
    * @return V3ApplicationWebhook
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistrySet(webhookIdsApplicationIdsApplicationId: kotlin.String, webhookIdsWebhookId: kotlin.String, body: V3SetApplicationWebhookRequest) : V3ApplicationWebhook {
        val localVarResponse = applicationWebhookRegistrySetWithHttpInfo(webhookIdsApplicationIdsApplicationId = webhookIdsApplicationIdsApplicationId, webhookIdsWebhookId = webhookIdsWebhookId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationWebhook
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param webhookIdsApplicationIdsApplicationId  
    * @param webhookIdsWebhookId  
    * @param body  
    * @return ApiInfrastructureResponse<V3ApplicationWebhook?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistrySetWithHttpInfo(webhookIdsApplicationIdsApplicationId: kotlin.String, webhookIdsWebhookId: kotlin.String, body: V3SetApplicationWebhookRequest) : ApiInfrastructureResponse<V3ApplicationWebhook?> {
        val localVariableConfig = applicationWebhookRegistrySetRequestConfig(webhookIdsApplicationIdsApplicationId = webhookIdsApplicationIdsApplicationId, webhookIdsWebhookId = webhookIdsWebhookId, body = body)

        return request<V3SetApplicationWebhookRequest, V3ApplicationWebhook>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationWebhookRegistrySet
    *
    * @param webhookIdsApplicationIdsApplicationId  
    * @param webhookIdsWebhookId  
    * @param body  
    * @return RequestConfig
    */
    fun applicationWebhookRegistrySetRequestConfig(webhookIdsApplicationIdsApplicationId: kotlin.String, webhookIdsWebhookId: kotlin.String, body: V3SetApplicationWebhookRequest) : RequestConfig<V3SetApplicationWebhookRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/as/webhooks/{webhook.ids.application_ids.application_id}/{webhook.ids.webhook_id}".replace("{"+"webhook.ids.application_ids.application_id"+"}", "$webhookIdsApplicationIdsApplicationId").replace("{"+"webhook.ids.webhook_id"+"}", "$webhookIdsWebhookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param webhookIdsApplicationIdsApplicationId  
    * @param body  
    * @return V3ApplicationWebhook
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistrySet2(webhookIdsApplicationIdsApplicationId: kotlin.String, body: V3SetApplicationWebhookRequest) : V3ApplicationWebhook {
        val localVarResponse = applicationWebhookRegistrySet2WithHttpInfo(webhookIdsApplicationIdsApplicationId = webhookIdsApplicationIdsApplicationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationWebhook
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param webhookIdsApplicationIdsApplicationId  
    * @param body  
    * @return ApiInfrastructureResponse<V3ApplicationWebhook?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationWebhookRegistrySet2WithHttpInfo(webhookIdsApplicationIdsApplicationId: kotlin.String, body: V3SetApplicationWebhookRequest) : ApiInfrastructureResponse<V3ApplicationWebhook?> {
        val localVariableConfig = applicationWebhookRegistrySet2RequestConfig(webhookIdsApplicationIdsApplicationId = webhookIdsApplicationIdsApplicationId, body = body)

        return request<V3SetApplicationWebhookRequest, V3ApplicationWebhook>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationWebhookRegistrySet2
    *
    * @param webhookIdsApplicationIdsApplicationId  
    * @param body  
    * @return RequestConfig
    */
    fun applicationWebhookRegistrySet2RequestConfig(webhookIdsApplicationIdsApplicationId: kotlin.String, body: V3SetApplicationWebhookRequest) : RequestConfig<V3SetApplicationWebhookRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/as/webhooks/{webhook.ids.application_ids.application_id}".replace("{"+"webhook.ids.application_ids.application_id"+"}", "$webhookIdsApplicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
