/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3CreateOrganizationRequest
import org.openapitools.client.models.V3Organization
import org.openapitools.client.models.V3Organizations
import org.openapitools.client.models.V3UpdateOrganizationRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class OrganizationRegistryApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Create a new organization. This also sets the given user as first collaborator with all possible rights.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param body  
    * @return V3Organization
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryCreate(collaboratorUserIdsUserId: kotlin.String, body: V3CreateOrganizationRequest) : V3Organization {
        val localVarResponse = organizationRegistryCreateWithHttpInfo(collaboratorUserIdsUserId = collaboratorUserIdsUserId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Organization
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create a new organization. This also sets the given user as first collaborator with all possible rights.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param body  
    * @return ApiInfrastructureResponse<V3Organization?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryCreateWithHttpInfo(collaboratorUserIdsUserId: kotlin.String, body: V3CreateOrganizationRequest) : ApiInfrastructureResponse<V3Organization?> {
        val localVariableConfig = organizationRegistryCreateRequestConfig(collaboratorUserIdsUserId = collaboratorUserIdsUserId, body = body)

        return request<V3CreateOrganizationRequest, V3Organization>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationRegistryCreate
    *
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param body  
    * @return RequestConfig
    */
    fun organizationRegistryCreateRequestConfig(collaboratorUserIdsUserId: kotlin.String, body: V3CreateOrganizationRequest) : RequestConfig<V3CreateOrganizationRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users/{collaborator.user_ids.user_id}/organizations".replace("{"+"collaborator.user_ids.user_id"+"}", "$collaboratorUserIdsUserId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete the organization. This may not release the organization ID for reuse.
    * 
    * @param organizationId This ID shares namespace with user IDs. 
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryDelete(organizationId: kotlin.String) : kotlin.Any {
        val localVarResponse = organizationRegistryDeleteWithHttpInfo(organizationId = organizationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete the organization. This may not release the organization ID for reuse.
    * 
    * @param organizationId This ID shares namespace with user IDs. 
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryDeleteWithHttpInfo(organizationId: kotlin.String) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = organizationRegistryDeleteRequestConfig(organizationId = organizationId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationRegistryDelete
    *
    * @param organizationId This ID shares namespace with user IDs. 
    * @return RequestConfig
    */
    fun organizationRegistryDeleteRequestConfig(organizationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/organizations/{organization_id}".replace("{"+"organization_id"+"}", "$organizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the organization with the given identifiers, selecting the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return V3Organization
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryGet(organizationIdsOrganizationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : V3Organization {
        val localVarResponse = organizationRegistryGetWithHttpInfo(organizationIdsOrganizationId = organizationIdsOrganizationId, fieldMaskPaths = fieldMaskPaths)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Organization
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the organization with the given identifiers, selecting the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return ApiInfrastructureResponse<V3Organization?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryGetWithHttpInfo(organizationIdsOrganizationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : ApiInfrastructureResponse<V3Organization?> {
        val localVariableConfig = organizationRegistryGetRequestConfig(organizationIdsOrganizationId = organizationIdsOrganizationId, fieldMaskPaths = fieldMaskPaths)

        return request<Unit, V3Organization>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationRegistryGet
    *
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return RequestConfig
    */
    fun organizationRegistryGetRequestConfig(organizationIdsOrganizationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{organization_ids.organization_id}".replace("{"+"organization_ids.organization_id"+"}", "$organizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List organizations where the given user or organization is a direct collaborator. If no user or organization is given, this returns the organizations the caller has access to. Similar to Get, this selects the fields given by the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted organizations. (optional)
    * @return V3Organizations
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryList(collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Organizations {
        val localVarResponse = organizationRegistryListWithHttpInfo(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Organizations
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List organizations where the given user or organization is a direct collaborator. If no user or organization is given, this returns the organizations the caller has access to. Similar to Get, this selects the fields given by the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted organizations. (optional)
    * @return ApiInfrastructureResponse<V3Organizations?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryListWithHttpInfo(collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Organizations?> {
        val localVariableConfig = organizationRegistryListRequestConfig(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Organizations>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationRegistryList
    *
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted organizations. (optional)
    * @return RequestConfig
    */
    fun organizationRegistryListRequestConfig(collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorOrganizationIdsOrganizationId != null) {
                    put("collaborator.organization_ids.organization_id", listOf(collaboratorOrganizationIdsOrganizationId.toString()))
                }
                if (collaboratorUserIdsUserId != null) {
                    put("collaborator.user_ids.user_id", listOf(collaboratorUserIdsUserId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List organizations where the given user or organization is a direct collaborator. If no user or organization is given, this returns the organizations the caller has access to. Similar to Get, this selects the fields given by the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted organizations. (optional)
    * @return V3Organizations
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryList2(collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Organizations {
        val localVarResponse = organizationRegistryList2WithHttpInfo(collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Organizations
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List organizations where the given user or organization is a direct collaborator. If no user or organization is given, this returns the organizations the caller has access to. Similar to Get, this selects the fields given by the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted organizations. (optional)
    * @return ApiInfrastructureResponse<V3Organizations?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryList2WithHttpInfo(collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Organizations?> {
        val localVariableConfig = organizationRegistryList2RequestConfig(collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Organizations>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationRegistryList2
    *
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted organizations. (optional)
    * @return RequestConfig
    */
    fun organizationRegistryList2RequestConfig(collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorOrganizationIdsOrganizationId != null) {
                    put("collaborator.organization_ids.organization_id", listOf(collaboratorOrganizationIdsOrganizationId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{collaborator.user_ids.user_id}/organizations".replace("{"+"collaborator.user_ids.user_id"+"}", "$collaboratorUserIdsUserId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Purge the organization. This will release the organization ID for reuse. The user is responsible for clearing data from any (external) integrations that may store and expose data by user or organization ID.
    * 
    * @param organizationId This ID shares namespace with user IDs. 
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryPurge(organizationId: kotlin.String) : kotlin.Any {
        val localVarResponse = organizationRegistryPurgeWithHttpInfo(organizationId = organizationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Purge the organization. This will release the organization ID for reuse. The user is responsible for clearing data from any (external) integrations that may store and expose data by user or organization ID.
    * 
    * @param organizationId This ID shares namespace with user IDs. 
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryPurgeWithHttpInfo(organizationId: kotlin.String) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = organizationRegistryPurgeRequestConfig(organizationId = organizationId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationRegistryPurge
    *
    * @param organizationId This ID shares namespace with user IDs. 
    * @return RequestConfig
    */
    fun organizationRegistryPurgeRequestConfig(organizationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/organizations/{organization_id}/purge".replace("{"+"organization_id"+"}", "$organizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Restore a recently deleted organization.
    * Deployment configuration may specify if, and for how long after deletion, entities can be restored.
    * @param organizationId This ID shares namespace with user IDs. 
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryRestore(organizationId: kotlin.String) : kotlin.Any {
        val localVarResponse = organizationRegistryRestoreWithHttpInfo(organizationId = organizationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Restore a recently deleted organization.
    * Deployment configuration may specify if, and for how long after deletion, entities can be restored.
    * @param organizationId This ID shares namespace with user IDs. 
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryRestoreWithHttpInfo(organizationId: kotlin.String) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = organizationRegistryRestoreRequestConfig(organizationId = organizationId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationRegistryRestore
    *
    * @param organizationId This ID shares namespace with user IDs. 
    * @return RequestConfig
    */
    fun organizationRegistryRestoreRequestConfig(organizationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/organizations/{organization_id}/restore".replace("{"+"organization_id"+"}", "$organizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update the organization, changing the fields specified by the field mask to the provided values.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return V3Organization
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryUpdate(organizationIdsOrganizationId: kotlin.String, body: V3UpdateOrganizationRequest) : V3Organization {
        val localVarResponse = organizationRegistryUpdateWithHttpInfo(organizationIdsOrganizationId = organizationIdsOrganizationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Organization
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update the organization, changing the fields specified by the field mask to the provided values.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return ApiInfrastructureResponse<V3Organization?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationRegistryUpdateWithHttpInfo(organizationIdsOrganizationId: kotlin.String, body: V3UpdateOrganizationRequest) : ApiInfrastructureResponse<V3Organization?> {
        val localVariableConfig = organizationRegistryUpdateRequestConfig(organizationIdsOrganizationId = organizationIdsOrganizationId, body = body)

        return request<V3UpdateOrganizationRequest, V3Organization>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationRegistryUpdate
    *
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return RequestConfig
    */
    fun organizationRegistryUpdateRequestConfig(organizationIdsOrganizationId: kotlin.String, body: V3UpdateOrganizationRequest) : RequestConfig<V3UpdateOrganizationRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/organizations/{organization.ids.organization_id}".replace("{"+"organization.ids.organization_id"+"}", "$organizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
