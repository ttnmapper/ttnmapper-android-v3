/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3GetPhyVersionsResponse
import org.openapitools.client.models.V3ListFrequencyPlansResponse

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ConfigurationApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Returns a list of supported LoRaWAN PHY Versions for the given Band ID.
    * 
    * @param bandId Optional Band ID to filter the results. If unused, all supported Bands and their versions are returned. (optional)
    * @return V3GetPhyVersionsResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationGetPhyVersions(bandId: kotlin.String?) : V3GetPhyVersionsResponse {
        val localVarResponse = configurationGetPhyVersionsWithHttpInfo(bandId = bandId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3GetPhyVersionsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Returns a list of supported LoRaWAN PHY Versions for the given Band ID.
    * 
    * @param bandId Optional Band ID to filter the results. If unused, all supported Bands and their versions are returned. (optional)
    * @return ApiInfrastructureResponse<V3GetPhyVersionsResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationGetPhyVersionsWithHttpInfo(bandId: kotlin.String?) : ApiInfrastructureResponse<V3GetPhyVersionsResponse?> {
        val localVariableConfig = configurationGetPhyVersionsRequestConfig(bandId = bandId)

        return request<Unit, V3GetPhyVersionsResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation configurationGetPhyVersions
    *
    * @param bandId Optional Band ID to filter the results. If unused, all supported Bands and their versions are returned. (optional)
    * @return RequestConfig
    */
    fun configurationGetPhyVersionsRequestConfig(bandId: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (bandId != null) {
                    put("band_id", listOf(bandId.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/configuration/phy-versions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param baseFrequency Optional base frequency in MHz for hardware support (433, 470, 868 or 915). (optional)
    * @return V3ListFrequencyPlansResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationListFrequencyPlans(baseFrequency: kotlin.Long?) : V3ListFrequencyPlansResponse {
        val localVarResponse = configurationListFrequencyPlansWithHttpInfo(baseFrequency = baseFrequency)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ListFrequencyPlansResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param baseFrequency Optional base frequency in MHz for hardware support (433, 470, 868 or 915). (optional)
    * @return ApiInfrastructureResponse<V3ListFrequencyPlansResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun configurationListFrequencyPlansWithHttpInfo(baseFrequency: kotlin.Long?) : ApiInfrastructureResponse<V3ListFrequencyPlansResponse?> {
        val localVariableConfig = configurationListFrequencyPlansRequestConfig(baseFrequency = baseFrequency)

        return request<Unit, V3ListFrequencyPlansResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation configurationListFrequencyPlans
    *
    * @param baseFrequency Optional base frequency in MHz for hardware support (433, 470, 868 or 915). (optional)
    * @return RequestConfig
    */
    fun configurationListFrequencyPlansRequestConfig(baseFrequency: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (baseFrequency != null) {
                    put("base_frequency", listOf(baseFrequency.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/configuration/frequency-plans",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
