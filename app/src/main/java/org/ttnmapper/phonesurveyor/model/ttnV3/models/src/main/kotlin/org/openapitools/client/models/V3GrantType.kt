/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 * The OAuth2 flows an OAuth client can use to get an access token.   - GRANT_AUTHORIZATION_CODE: Grant type used to exchange an authorization code for an access token.  - GRANT_PASSWORD: Grant type used to exchange a user ID and password for an access token.  - GRANT_REFRESH_TOKEN: Grant type used to exchange a refresh token for an access token.
 *
 * Values: aUTHORIZATIONCODE,pASSWORD,rEFRESHTOKEN
 */

enum class V3GrantType(val value: kotlin.String) {

    @Json(name = "GRANT_AUTHORIZATION_CODE")
    aUTHORIZATIONCODE("GRANT_AUTHORIZATION_CODE"),

    @Json(name = "GRANT_PASSWORD")
    pASSWORD("GRANT_PASSWORD"),

    @Json(name = "GRANT_REFRESH_TOKEN")
    rEFRESHTOKEN("GRANT_REFRESH_TOKEN");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is V3GrantType) "$data" else null

        /**
         * Returns a valid [V3GrantType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): V3GrantType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

