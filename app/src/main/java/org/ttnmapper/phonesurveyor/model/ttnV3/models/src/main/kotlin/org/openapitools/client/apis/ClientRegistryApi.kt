/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3Client
import org.openapitools.client.models.V3Clients
import org.openapitools.client.models.V3CreateClientRequest
import org.openapitools.client.models.V3UpdateClientRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ClientRegistryApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Create a new OAuth client. This also sets the given organization or user as first collaborator with all possible rights.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param body  
    * @return V3Client
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryCreate(collaboratorUserIdsUserId: kotlin.String, body: V3CreateClientRequest) : V3Client {
        val localVarResponse = clientRegistryCreateWithHttpInfo(collaboratorUserIdsUserId = collaboratorUserIdsUserId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Client
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create a new OAuth client. This also sets the given organization or user as first collaborator with all possible rights.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param body  
    * @return ApiInfrastructureResponse<V3Client?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryCreateWithHttpInfo(collaboratorUserIdsUserId: kotlin.String, body: V3CreateClientRequest) : ApiInfrastructureResponse<V3Client?> {
        val localVariableConfig = clientRegistryCreateRequestConfig(collaboratorUserIdsUserId = collaboratorUserIdsUserId, body = body)

        return request<V3CreateClientRequest, V3Client>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientRegistryCreate
    *
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param body  
    * @return RequestConfig
    */
    fun clientRegistryCreateRequestConfig(collaboratorUserIdsUserId: kotlin.String, body: V3CreateClientRequest) : RequestConfig<V3CreateClientRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users/{collaborator.user_ids.user_id}/clients".replace("{"+"collaborator.user_ids.user_id"+"}", "$collaboratorUserIdsUserId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create a new OAuth client. This also sets the given organization or user as first collaborator with all possible rights.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return V3Client
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryCreate2(collaboratorOrganizationIdsOrganizationId: kotlin.String, body: V3CreateClientRequest) : V3Client {
        val localVarResponse = clientRegistryCreate2WithHttpInfo(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Client
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create a new OAuth client. This also sets the given organization or user as first collaborator with all possible rights.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return ApiInfrastructureResponse<V3Client?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryCreate2WithHttpInfo(collaboratorOrganizationIdsOrganizationId: kotlin.String, body: V3CreateClientRequest) : ApiInfrastructureResponse<V3Client?> {
        val localVariableConfig = clientRegistryCreate2RequestConfig(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, body = body)

        return request<V3CreateClientRequest, V3Client>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientRegistryCreate2
    *
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return RequestConfig
    */
    fun clientRegistryCreate2RequestConfig(collaboratorOrganizationIdsOrganizationId: kotlin.String, body: V3CreateClientRequest) : RequestConfig<V3CreateClientRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/organizations/{collaborator.organization_ids.organization_id}/clients".replace("{"+"collaborator.organization_ids.organization_id"+"}", "$collaboratorOrganizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete the OAuth client. This may not release the client ID for reuse.
    * 
    * @param clientId  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryDelete(clientId: kotlin.String) : kotlin.Any {
        val localVarResponse = clientRegistryDeleteWithHttpInfo(clientId = clientId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete the OAuth client. This may not release the client ID for reuse.
    * 
    * @param clientId  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryDeleteWithHttpInfo(clientId: kotlin.String) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = clientRegistryDeleteRequestConfig(clientId = clientId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientRegistryDelete
    *
    * @param clientId  
    * @return RequestConfig
    */
    fun clientRegistryDeleteRequestConfig(clientId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/clients/{client_id}".replace("{"+"client_id"+"}", "$clientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the OAuth client with the given identifiers, selecting the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param clientIdsClientId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return V3Client
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryGet(clientIdsClientId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : V3Client {
        val localVarResponse = clientRegistryGetWithHttpInfo(clientIdsClientId = clientIdsClientId, fieldMaskPaths = fieldMaskPaths)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Client
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the OAuth client with the given identifiers, selecting the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param clientIdsClientId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return ApiInfrastructureResponse<V3Client?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryGetWithHttpInfo(clientIdsClientId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : ApiInfrastructureResponse<V3Client?> {
        val localVariableConfig = clientRegistryGetRequestConfig(clientIdsClientId = clientIdsClientId, fieldMaskPaths = fieldMaskPaths)

        return request<Unit, V3Client>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientRegistryGet
    *
    * @param clientIdsClientId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return RequestConfig
    */
    fun clientRegistryGetRequestConfig(clientIdsClientId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/clients/{client_ids.client_id}".replace("{"+"client_ids.client_id"+"}", "$clientIdsClientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List OAuth clients where the given user or organization is a direct collaborator. If no user or organization is given, this returns the OAuth clients the caller has access to. Similar to Get, this selects the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted clients. (optional)
    * @return V3Clients
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryList(collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Clients {
        val localVarResponse = clientRegistryListWithHttpInfo(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Clients
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List OAuth clients where the given user or organization is a direct collaborator. If no user or organization is given, this returns the OAuth clients the caller has access to. Similar to Get, this selects the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted clients. (optional)
    * @return ApiInfrastructureResponse<V3Clients?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryListWithHttpInfo(collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Clients?> {
        val localVariableConfig = clientRegistryListRequestConfig(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Clients>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientRegistryList
    *
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted clients. (optional)
    * @return RequestConfig
    */
    fun clientRegistryListRequestConfig(collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorOrganizationIdsOrganizationId != null) {
                    put("collaborator.organization_ids.organization_id", listOf(collaboratorOrganizationIdsOrganizationId.toString()))
                }
                if (collaboratorUserIdsUserId != null) {
                    put("collaborator.user_ids.user_id", listOf(collaboratorUserIdsUserId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/clients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List OAuth clients where the given user or organization is a direct collaborator. If no user or organization is given, this returns the OAuth clients the caller has access to. Similar to Get, this selects the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted clients. (optional)
    * @return V3Clients
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryList2(collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Clients {
        val localVarResponse = clientRegistryList2WithHttpInfo(collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Clients
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List OAuth clients where the given user or organization is a direct collaborator. If no user or organization is given, this returns the OAuth clients the caller has access to. Similar to Get, this selects the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted clients. (optional)
    * @return ApiInfrastructureResponse<V3Clients?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryList2WithHttpInfo(collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Clients?> {
        val localVariableConfig = clientRegistryList2RequestConfig(collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Clients>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientRegistryList2
    *
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted clients. (optional)
    * @return RequestConfig
    */
    fun clientRegistryList2RequestConfig(collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorOrganizationIdsOrganizationId != null) {
                    put("collaborator.organization_ids.organization_id", listOf(collaboratorOrganizationIdsOrganizationId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{collaborator.user_ids.user_id}/clients".replace("{"+"collaborator.user_ids.user_id"+"}", "$collaboratorUserIdsUserId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List OAuth clients where the given user or organization is a direct collaborator. If no user or organization is given, this returns the OAuth clients the caller has access to. Similar to Get, this selects the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted clients. (optional)
    * @return V3Clients
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryList3(collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Clients {
        val localVarResponse = clientRegistryList3WithHttpInfo(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Clients
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List OAuth clients where the given user or organization is a direct collaborator. If no user or organization is given, this returns the OAuth clients the caller has access to. Similar to Get, this selects the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted clients. (optional)
    * @return ApiInfrastructureResponse<V3Clients?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryList3WithHttpInfo(collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Clients?> {
        val localVariableConfig = clientRegistryList3RequestConfig(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Clients>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientRegistryList3
    *
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted clients. (optional)
    * @return RequestConfig
    */
    fun clientRegistryList3RequestConfig(collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorUserIdsUserId != null) {
                    put("collaborator.user_ids.user_id", listOf(collaboratorUserIdsUserId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{collaborator.organization_ids.organization_id}/clients".replace("{"+"collaborator.organization_ids.organization_id"+"}", "$collaboratorOrganizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Purge the client. This will release the client ID for reuse.
    * 
    * @param clientId  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryPurge(clientId: kotlin.String) : kotlin.Any {
        val localVarResponse = clientRegistryPurgeWithHttpInfo(clientId = clientId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Purge the client. This will release the client ID for reuse.
    * 
    * @param clientId  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryPurgeWithHttpInfo(clientId: kotlin.String) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = clientRegistryPurgeRequestConfig(clientId = clientId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientRegistryPurge
    *
    * @param clientId  
    * @return RequestConfig
    */
    fun clientRegistryPurgeRequestConfig(clientId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/clients/{client_id}/purge".replace("{"+"client_id"+"}", "$clientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Restore a recently deleted client.
    * Deployment configuration may specify if, and for how long after deletion, entities can be restored.
    * @param clientId  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryRestore(clientId: kotlin.String) : kotlin.Any {
        val localVarResponse = clientRegistryRestoreWithHttpInfo(clientId = clientId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Restore a recently deleted client.
    * Deployment configuration may specify if, and for how long after deletion, entities can be restored.
    * @param clientId  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryRestoreWithHttpInfo(clientId: kotlin.String) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = clientRegistryRestoreRequestConfig(clientId = clientId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientRegistryRestore
    *
    * @param clientId  
    * @return RequestConfig
    */
    fun clientRegistryRestoreRequestConfig(clientId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/clients/{client_id}/restore".replace("{"+"client_id"+"}", "$clientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update the OAuth client, changing the fields specified by the field mask to the provided values.
    * 
    * @param clientIdsClientId  
    * @param body  
    * @return V3Client
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryUpdate(clientIdsClientId: kotlin.String, body: V3UpdateClientRequest) : V3Client {
        val localVarResponse = clientRegistryUpdateWithHttpInfo(clientIdsClientId = clientIdsClientId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Client
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update the OAuth client, changing the fields specified by the field mask to the provided values.
    * 
    * @param clientIdsClientId  
    * @param body  
    * @return ApiInfrastructureResponse<V3Client?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientRegistryUpdateWithHttpInfo(clientIdsClientId: kotlin.String, body: V3UpdateClientRequest) : ApiInfrastructureResponse<V3Client?> {
        val localVariableConfig = clientRegistryUpdateRequestConfig(clientIdsClientId = clientIdsClientId, body = body)

        return request<V3UpdateClientRequest, V3Client>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientRegistryUpdate
    *
    * @param clientIdsClientId  
    * @param body  
    * @return RequestConfig
    */
    fun clientRegistryUpdateRequestConfig(clientIdsClientId: kotlin.String, body: V3UpdateClientRequest) : RequestConfig<V3UpdateClientRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/clients/{client.ids.client_id}".replace("{"+"client.ids.client_id"+"}", "$clientIdsClientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
