/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3CreateGatewayRequest
import org.openapitools.client.models.V3Gateway
import org.openapitools.client.models.V3Gateways
import org.openapitools.client.models.V3UpdateGatewayRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class GatewayRegistryApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Create a new gateway. This also sets the given organization or user as first collaborator with all possible rights.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param body  
    * @return V3Gateway
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryCreate(collaboratorUserIdsUserId: kotlin.String, body: V3CreateGatewayRequest) : V3Gateway {
        val localVarResponse = gatewayRegistryCreateWithHttpInfo(collaboratorUserIdsUserId = collaboratorUserIdsUserId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Gateway
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create a new gateway. This also sets the given organization or user as first collaborator with all possible rights.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param body  
    * @return ApiInfrastructureResponse<V3Gateway?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryCreateWithHttpInfo(collaboratorUserIdsUserId: kotlin.String, body: V3CreateGatewayRequest) : ApiInfrastructureResponse<V3Gateway?> {
        val localVariableConfig = gatewayRegistryCreateRequestConfig(collaboratorUserIdsUserId = collaboratorUserIdsUserId, body = body)

        return request<V3CreateGatewayRequest, V3Gateway>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayRegistryCreate
    *
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param body  
    * @return RequestConfig
    */
    fun gatewayRegistryCreateRequestConfig(collaboratorUserIdsUserId: kotlin.String, body: V3CreateGatewayRequest) : RequestConfig<V3CreateGatewayRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users/{collaborator.user_ids.user_id}/gateways".replace("{"+"collaborator.user_ids.user_id"+"}", "$collaboratorUserIdsUserId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create a new gateway. This also sets the given organization or user as first collaborator with all possible rights.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return V3Gateway
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryCreate2(collaboratorOrganizationIdsOrganizationId: kotlin.String, body: V3CreateGatewayRequest) : V3Gateway {
        val localVarResponse = gatewayRegistryCreate2WithHttpInfo(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Gateway
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create a new gateway. This also sets the given organization or user as first collaborator with all possible rights.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return ApiInfrastructureResponse<V3Gateway?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryCreate2WithHttpInfo(collaboratorOrganizationIdsOrganizationId: kotlin.String, body: V3CreateGatewayRequest) : ApiInfrastructureResponse<V3Gateway?> {
        val localVariableConfig = gatewayRegistryCreate2RequestConfig(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, body = body)

        return request<V3CreateGatewayRequest, V3Gateway>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayRegistryCreate2
    *
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return RequestConfig
    */
    fun gatewayRegistryCreate2RequestConfig(collaboratorOrganizationIdsOrganizationId: kotlin.String, body: V3CreateGatewayRequest) : RequestConfig<V3CreateGatewayRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/organizations/{collaborator.organization_ids.organization_id}/gateways".replace("{"+"collaborator.organization_ids.organization_id"+"}", "$collaboratorOrganizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete the gateway. This may not release the gateway ID for reuse, but it does release the EUI.
    * 
    * @param gatewayId  
    * @param eui Secondary identifier, which can only be used in specific requests. (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryDelete(gatewayId: kotlin.String, eui: kotlin.ByteArray?) : kotlin.Any {
        val localVarResponse = gatewayRegistryDeleteWithHttpInfo(gatewayId = gatewayId, eui = eui)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete the gateway. This may not release the gateway ID for reuse, but it does release the EUI.
    * 
    * @param gatewayId  
    * @param eui Secondary identifier, which can only be used in specific requests. (optional)
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryDeleteWithHttpInfo(gatewayId: kotlin.String, eui: kotlin.ByteArray?) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = gatewayRegistryDeleteRequestConfig(gatewayId = gatewayId, eui = eui)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayRegistryDelete
    *
    * @param gatewayId  
    * @param eui Secondary identifier, which can only be used in specific requests. (optional)
    * @return RequestConfig
    */
    fun gatewayRegistryDeleteRequestConfig(gatewayId: kotlin.String, eui: kotlin.ByteArray?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (eui != null) {
                    put("eui", listOf(eui.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/gateways/{gateway_id}".replace("{"+"gateway_id"+"}", "$gatewayId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the gateway with the given identifiers, selecting the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param gatewayIdsGatewayId  
    * @param gatewayIdsEui Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return V3Gateway
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryGet(gatewayIdsGatewayId: kotlin.String, gatewayIdsEui: kotlin.ByteArray?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : V3Gateway {
        val localVarResponse = gatewayRegistryGetWithHttpInfo(gatewayIdsGatewayId = gatewayIdsGatewayId, gatewayIdsEui = gatewayIdsEui, fieldMaskPaths = fieldMaskPaths)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Gateway
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the gateway with the given identifiers, selecting the fields specified in the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param gatewayIdsGatewayId  
    * @param gatewayIdsEui Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return ApiInfrastructureResponse<V3Gateway?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryGetWithHttpInfo(gatewayIdsGatewayId: kotlin.String, gatewayIdsEui: kotlin.ByteArray?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : ApiInfrastructureResponse<V3Gateway?> {
        val localVariableConfig = gatewayRegistryGetRequestConfig(gatewayIdsGatewayId = gatewayIdsGatewayId, gatewayIdsEui = gatewayIdsEui, fieldMaskPaths = fieldMaskPaths)

        return request<Unit, V3Gateway>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayRegistryGet
    *
    * @param gatewayIdsGatewayId  
    * @param gatewayIdsEui Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return RequestConfig
    */
    fun gatewayRegistryGetRequestConfig(gatewayIdsGatewayId: kotlin.String, gatewayIdsEui: kotlin.ByteArray?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (gatewayIdsEui != null) {
                    put("gateway_ids.eui", listOf(gatewayIdsEui.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/gateways/{gateway_ids.gateway_id}".replace("{"+"gateway_ids.gateway_id"+"}", "$gatewayIdsGatewayId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List gateways where the given user or organization is a direct collaborator. If no user or organization is given, this returns the gateways the caller has access to. Similar to Get, this selects the fields given by the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return V3Gateways
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryList(collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Gateways {
        val localVarResponse = gatewayRegistryListWithHttpInfo(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Gateways
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List gateways where the given user or organization is a direct collaborator. If no user or organization is given, this returns the gateways the caller has access to. Similar to Get, this selects the fields given by the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return ApiInfrastructureResponse<V3Gateways?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryListWithHttpInfo(collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Gateways?> {
        val localVariableConfig = gatewayRegistryListRequestConfig(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Gateways>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayRegistryList
    *
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return RequestConfig
    */
    fun gatewayRegistryListRequestConfig(collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorOrganizationIdsOrganizationId != null) {
                    put("collaborator.organization_ids.organization_id", listOf(collaboratorOrganizationIdsOrganizationId.toString()))
                }
                if (collaboratorUserIdsUserId != null) {
                    put("collaborator.user_ids.user_id", listOf(collaboratorUserIdsUserId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/gateways",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List gateways where the given user or organization is a direct collaborator. If no user or organization is given, this returns the gateways the caller has access to. Similar to Get, this selects the fields given by the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return V3Gateways
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryList2(collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Gateways {
        val localVarResponse = gatewayRegistryList2WithHttpInfo(collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Gateways
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List gateways where the given user or organization is a direct collaborator. If no user or organization is given, this returns the gateways the caller has access to. Similar to Get, this selects the fields given by the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return ApiInfrastructureResponse<V3Gateways?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryList2WithHttpInfo(collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Gateways?> {
        val localVariableConfig = gatewayRegistryList2RequestConfig(collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Gateways>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayRegistryList2
    *
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return RequestConfig
    */
    fun gatewayRegistryList2RequestConfig(collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorOrganizationIdsOrganizationId != null) {
                    put("collaborator.organization_ids.organization_id", listOf(collaboratorOrganizationIdsOrganizationId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{collaborator.user_ids.user_id}/gateways".replace("{"+"collaborator.user_ids.user_id"+"}", "$collaboratorUserIdsUserId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List gateways where the given user or organization is a direct collaborator. If no user or organization is given, this returns the gateways the caller has access to. Similar to Get, this selects the fields given by the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return V3Gateways
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryList3(collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Gateways {
        val localVarResponse = gatewayRegistryList3WithHttpInfo(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Gateways
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List gateways where the given user or organization is a direct collaborator. If no user or organization is given, this returns the gateways the caller has access to. Similar to Get, this selects the fields given by the field mask. More or less fields may be returned, depending on the rights of the caller.
    * 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return ApiInfrastructureResponse<V3Gateways?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryList3WithHttpInfo(collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Gateways?> {
        val localVariableConfig = gatewayRegistryList3RequestConfig(collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Gateways>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayRegistryList3
    *
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return RequestConfig
    */
    fun gatewayRegistryList3RequestConfig(collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorUserIdsUserId != null) {
                    put("collaborator.user_ids.user_id", listOf(collaboratorUserIdsUserId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{collaborator.organization_ids.organization_id}/gateways".replace("{"+"collaborator.organization_ids.organization_id"+"}", "$collaboratorOrganizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Purge the gateway. This will release both gateway ID and EUI for reuse. The gateway owner is responsible for clearing data from any (external) integrations that may store and expose data by gateway ID.
    * 
    * @param gatewayId  
    * @param eui Secondary identifier, which can only be used in specific requests. (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryPurge(gatewayId: kotlin.String, eui: kotlin.ByteArray?) : kotlin.Any {
        val localVarResponse = gatewayRegistryPurgeWithHttpInfo(gatewayId = gatewayId, eui = eui)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Purge the gateway. This will release both gateway ID and EUI for reuse. The gateway owner is responsible for clearing data from any (external) integrations that may store and expose data by gateway ID.
    * 
    * @param gatewayId  
    * @param eui Secondary identifier, which can only be used in specific requests. (optional)
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryPurgeWithHttpInfo(gatewayId: kotlin.String, eui: kotlin.ByteArray?) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = gatewayRegistryPurgeRequestConfig(gatewayId = gatewayId, eui = eui)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayRegistryPurge
    *
    * @param gatewayId  
    * @param eui Secondary identifier, which can only be used in specific requests. (optional)
    * @return RequestConfig
    */
    fun gatewayRegistryPurgeRequestConfig(gatewayId: kotlin.String, eui: kotlin.ByteArray?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (eui != null) {
                    put("eui", listOf(eui.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/gateways/{gateway_id}/purge".replace("{"+"gateway_id"+"}", "$gatewayId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Restore a recently deleted gateway. This does not restore the EUI, as that was released when deleting the gateway.
    * Deployment configuration may specify if, and for how long after deletion, entities can be restored.
    * @param gatewayId  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryRestore(gatewayId: kotlin.String) : kotlin.Any {
        val localVarResponse = gatewayRegistryRestoreWithHttpInfo(gatewayId = gatewayId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Restore a recently deleted gateway. This does not restore the EUI, as that was released when deleting the gateway.
    * Deployment configuration may specify if, and for how long after deletion, entities can be restored.
    * @param gatewayId  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryRestoreWithHttpInfo(gatewayId: kotlin.String) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = gatewayRegistryRestoreRequestConfig(gatewayId = gatewayId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayRegistryRestore
    *
    * @param gatewayId  
    * @return RequestConfig
    */
    fun gatewayRegistryRestoreRequestConfig(gatewayId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/gateways/{gateway_id}/restore".replace("{"+"gateway_id"+"}", "$gatewayId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update the gateway, changing the fields specified by the field mask to the provided values.
    * 
    * @param gatewayIdsGatewayId  
    * @param body  
    * @return V3Gateway
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryUpdate(gatewayIdsGatewayId: kotlin.String, body: V3UpdateGatewayRequest) : V3Gateway {
        val localVarResponse = gatewayRegistryUpdateWithHttpInfo(gatewayIdsGatewayId = gatewayIdsGatewayId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Gateway
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update the gateway, changing the fields specified by the field mask to the provided values.
    * 
    * @param gatewayIdsGatewayId  
    * @param body  
    * @return ApiInfrastructureResponse<V3Gateway?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun gatewayRegistryUpdateWithHttpInfo(gatewayIdsGatewayId: kotlin.String, body: V3UpdateGatewayRequest) : ApiInfrastructureResponse<V3Gateway?> {
        val localVariableConfig = gatewayRegistryUpdateRequestConfig(gatewayIdsGatewayId = gatewayIdsGatewayId, body = body)

        return request<V3UpdateGatewayRequest, V3Gateway>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation gatewayRegistryUpdate
    *
    * @param gatewayIdsGatewayId  
    * @param body  
    * @return RequestConfig
    */
    fun gatewayRegistryUpdateRequestConfig(gatewayIdsGatewayId: kotlin.String, body: V3UpdateGatewayRequest) : RequestConfig<V3UpdateGatewayRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/gateways/{gateway.ids.gateway_id}".replace("{"+"gateway.ids.gateway_id"+"}", "$gatewayIdsGatewayId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
