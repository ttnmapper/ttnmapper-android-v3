/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.MQTTProviderQoS

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * The MQTT provider settings.
 *
 * @param serverUrl 
 * @param clientId 
 * @param username 
 * @param password 
 * @param subscribeQos 
 * @param publishQos 
 * @param useTls 
 * @param tlsCa The server Root CA certificate. PEM formatted.
 * @param tlsClientCert The client certificate. PEM formatted.
 * @param tlsClientKey The client private key. PEM formatted.
 * @param headers HTTP headers to use on MQTT-over-Websocket connections.
 */
@JsonClass(generateAdapter = true)
data class ApplicationPubSubMQTTProvider (

    @Json(name = "server_url")
    val serverUrl: kotlin.String? = null,

    @Json(name = "client_id")
    val clientId: kotlin.String? = null,

    @Json(name = "username")
    val username: kotlin.String? = null,

    @Json(name = "password")
    val password: kotlin.String? = null,

    @Json(name = "subscribe_qos")
    val subscribeQos: MQTTProviderQoS? = MQTTProviderQoS.aTMOSTONCE,

    @Json(name = "publish_qos")
    val publishQos: MQTTProviderQoS? = MQTTProviderQoS.aTMOSTONCE,

    @Json(name = "use_tls")
    val useTls: kotlin.Boolean? = null,

    /* The server Root CA certificate. PEM formatted. */
    @Json(name = "tls_ca")
    val tlsCa: kotlin.ByteArray? = null,

    /* The client certificate. PEM formatted. */
    @Json(name = "tls_client_cert")
    val tlsClientCert: kotlin.ByteArray? = null,

    /* The client private key. PEM formatted. */
    @Json(name = "tls_client_key")
    val tlsClientKey: kotlin.ByteArray? = null,

    /* HTTP headers to use on MQTT-over-Websocket connections. */
    @Json(name = "headers")
    val headers: kotlin.collections.Map<kotlin.String, kotlin.String>? = null

)

