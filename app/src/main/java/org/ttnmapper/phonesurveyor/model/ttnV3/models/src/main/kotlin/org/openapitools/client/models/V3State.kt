/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 * State enum defines states that an entity can be in.   - STATE_REQUESTED: Denotes that the entity has been requested and is pending review by an admin.  - STATE_APPROVED: Denotes that the entity has been reviewed and approved by an admin.  - STATE_REJECTED: Denotes that the entity has been reviewed and rejected by an admin.  - STATE_FLAGGED: Denotes that the entity has been flagged and is pending review by an admin.  - STATE_SUSPENDED: Denotes that the entity has been reviewed and suspended by an admin.
 *
 * Values: rEQUESTED,aPPROVED,rEJECTED,fLAGGED,sUSPENDED
 */

enum class V3State(val value: kotlin.String) {

    @Json(name = "STATE_REQUESTED")
    rEQUESTED("STATE_REQUESTED"),

    @Json(name = "STATE_APPROVED")
    aPPROVED("STATE_APPROVED"),

    @Json(name = "STATE_REJECTED")
    rEJECTED("STATE_REJECTED"),

    @Json(name = "STATE_FLAGGED")
    fLAGGED("STATE_FLAGGED"),

    @Json(name = "STATE_SUSPENDED")
    sUSPENDED("STATE_SUSPENDED");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is V3State) "$data" else null

        /**
         * Returns a valid [V3State] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): V3State? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

