/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.StreamResultOfV3ApplicationUp
import org.openapitools.client.models.V3GetStoredApplicationUpCountResponse

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ApplicationUpStorageApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Returns a stream of application messages that have been stored in the database.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param type Query upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param limit Limit number of results. (optional)
    * @param after Query upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Query upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Query uplinks on a specific FPort only. (optional)
    * @param order Order results. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param last Query upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return StreamResultOfV3ApplicationUp
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationUpStorageGetStoredApplicationUp(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, type: kotlin.String, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, limit: kotlin.Long?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, order: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, last: kotlin.String?) : StreamResultOfV3ApplicationUp {
        val localVarResponse = applicationUpStorageGetStoredApplicationUpWithHttpInfo(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, type = type, endDeviceIdsDevEui = endDeviceIdsDevEui, endDeviceIdsJoinEui = endDeviceIdsJoinEui, endDeviceIdsDevAddr = endDeviceIdsDevAddr, limit = limit, after = after, before = before, fPort = fPort, order = order, fieldMaskPaths = fieldMaskPaths, last = last)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StreamResultOfV3ApplicationUp
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Returns a stream of application messages that have been stored in the database.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param type Query upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param limit Limit number of results. (optional)
    * @param after Query upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Query upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Query uplinks on a specific FPort only. (optional)
    * @param order Order results. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param last Query upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return ApiInfrastructureResponse<StreamResultOfV3ApplicationUp?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationUpStorageGetStoredApplicationUpWithHttpInfo(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, type: kotlin.String, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, limit: kotlin.Long?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, order: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, last: kotlin.String?) : ApiInfrastructureResponse<StreamResultOfV3ApplicationUp?> {
        val localVariableConfig = applicationUpStorageGetStoredApplicationUpRequestConfig(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, type = type, endDeviceIdsDevEui = endDeviceIdsDevEui, endDeviceIdsJoinEui = endDeviceIdsJoinEui, endDeviceIdsDevAddr = endDeviceIdsDevAddr, limit = limit, after = after, before = before, fPort = fPort, order = order, fieldMaskPaths = fieldMaskPaths, last = last)

        return request<Unit, StreamResultOfV3ApplicationUp>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationUpStorageGetStoredApplicationUp
    *
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param type Query upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param limit Limit number of results. (optional)
    * @param after Query upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Query upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Query uplinks on a specific FPort only. (optional)
    * @param order Order results. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param last Query upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return RequestConfig
    */
    fun applicationUpStorageGetStoredApplicationUpRequestConfig(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, type: kotlin.String, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, limit: kotlin.Long?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, order: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, last: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (endDeviceIdsDevEui != null) {
                    put("end_device_ids.dev_eui", listOf(endDeviceIdsDevEui.toString()))
                }
                if (endDeviceIdsJoinEui != null) {
                    put("end_device_ids.join_eui", listOf(endDeviceIdsJoinEui.toString()))
                }
                if (endDeviceIdsDevAddr != null) {
                    put("end_device_ids.dev_addr", listOf(endDeviceIdsDevAddr.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(parseDateToQueryString(after)))
                }
                if (before != null) {
                    put("before", listOf(parseDateToQueryString(before)))
                }
                if (fPort != null) {
                    put("f_port", listOf(fPort.toString()))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (last != null) {
                    put("last", listOf(last.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/packages/storage/{type}".replace("{"+"end_device_ids.application_ids.application_id"+"}", "$endDeviceIdsApplicationIdsApplicationId").replace("{"+"end_device_ids.device_id"+"}", "$endDeviceIdsDeviceId").replace("{"+"type"+"}", "$type"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Returns a stream of application messages that have been stored in the database.
    * 
    * @param applicationIdsApplicationId  
    * @param type Query upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDeviceId  (optional)
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param limit Limit number of results. (optional)
    * @param after Query upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Query upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Query uplinks on a specific FPort only. (optional)
    * @param order Order results. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param last Query upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return StreamResultOfV3ApplicationUp
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationUpStorageGetStoredApplicationUp2(applicationIdsApplicationId: kotlin.String, type: kotlin.String, endDeviceIdsDeviceId: kotlin.String?, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, limit: kotlin.Long?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, order: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, last: kotlin.String?) : StreamResultOfV3ApplicationUp {
        val localVarResponse = applicationUpStorageGetStoredApplicationUp2WithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, type = type, endDeviceIdsDeviceId = endDeviceIdsDeviceId, endDeviceIdsDevEui = endDeviceIdsDevEui, endDeviceIdsJoinEui = endDeviceIdsJoinEui, endDeviceIdsDevAddr = endDeviceIdsDevAddr, limit = limit, after = after, before = before, fPort = fPort, order = order, fieldMaskPaths = fieldMaskPaths, last = last)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StreamResultOfV3ApplicationUp
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Returns a stream of application messages that have been stored in the database.
    * 
    * @param applicationIdsApplicationId  
    * @param type Query upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDeviceId  (optional)
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param limit Limit number of results. (optional)
    * @param after Query upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Query upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Query uplinks on a specific FPort only. (optional)
    * @param order Order results. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param last Query upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return ApiInfrastructureResponse<StreamResultOfV3ApplicationUp?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationUpStorageGetStoredApplicationUp2WithHttpInfo(applicationIdsApplicationId: kotlin.String, type: kotlin.String, endDeviceIdsDeviceId: kotlin.String?, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, limit: kotlin.Long?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, order: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, last: kotlin.String?) : ApiInfrastructureResponse<StreamResultOfV3ApplicationUp?> {
        val localVariableConfig = applicationUpStorageGetStoredApplicationUp2RequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, type = type, endDeviceIdsDeviceId = endDeviceIdsDeviceId, endDeviceIdsDevEui = endDeviceIdsDevEui, endDeviceIdsJoinEui = endDeviceIdsJoinEui, endDeviceIdsDevAddr = endDeviceIdsDevAddr, limit = limit, after = after, before = before, fPort = fPort, order = order, fieldMaskPaths = fieldMaskPaths, last = last)

        return request<Unit, StreamResultOfV3ApplicationUp>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationUpStorageGetStoredApplicationUp2
    *
    * @param applicationIdsApplicationId  
    * @param type Query upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDeviceId  (optional)
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param limit Limit number of results. (optional)
    * @param after Query upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Query upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Query uplinks on a specific FPort only. (optional)
    * @param order Order results. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param last Query upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return RequestConfig
    */
    fun applicationUpStorageGetStoredApplicationUp2RequestConfig(applicationIdsApplicationId: kotlin.String, type: kotlin.String, endDeviceIdsDeviceId: kotlin.String?, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, limit: kotlin.Long?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, order: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, last: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (endDeviceIdsDeviceId != null) {
                    put("end_device_ids.device_id", listOf(endDeviceIdsDeviceId.toString()))
                }
                if (endDeviceIdsDevEui != null) {
                    put("end_device_ids.dev_eui", listOf(endDeviceIdsDevEui.toString()))
                }
                if (endDeviceIdsJoinEui != null) {
                    put("end_device_ids.join_eui", listOf(endDeviceIdsJoinEui.toString()))
                }
                if (endDeviceIdsDevAddr != null) {
                    put("end_device_ids.dev_addr", listOf(endDeviceIdsDevAddr.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (after != null) {
                    put("after", listOf(parseDateToQueryString(after)))
                }
                if (before != null) {
                    put("before", listOf(parseDateToQueryString(before)))
                }
                if (fPort != null) {
                    put("f_port", listOf(fPort.toString()))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (last != null) {
                    put("last", listOf(last.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/applications/{application_ids.application_id}/packages/storage/{type}".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId").replace("{"+"type"+"}", "$type"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Returns how many application messages have been stored in the database for an application or end device.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param type Count upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param after Count upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Count upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Count uplinks on a specific FPort only. (optional)
    * @param last Count upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return V3GetStoredApplicationUpCountResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationUpStorageGetStoredApplicationUpCount(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, type: kotlin.String, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, last: kotlin.String?) : V3GetStoredApplicationUpCountResponse {
        val localVarResponse = applicationUpStorageGetStoredApplicationUpCountWithHttpInfo(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, type = type, endDeviceIdsDevEui = endDeviceIdsDevEui, endDeviceIdsJoinEui = endDeviceIdsJoinEui, endDeviceIdsDevAddr = endDeviceIdsDevAddr, after = after, before = before, fPort = fPort, last = last)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3GetStoredApplicationUpCountResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Returns how many application messages have been stored in the database for an application or end device.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param type Count upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param after Count upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Count upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Count uplinks on a specific FPort only. (optional)
    * @param last Count upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return ApiInfrastructureResponse<V3GetStoredApplicationUpCountResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationUpStorageGetStoredApplicationUpCountWithHttpInfo(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, type: kotlin.String, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, last: kotlin.String?) : ApiInfrastructureResponse<V3GetStoredApplicationUpCountResponse?> {
        val localVariableConfig = applicationUpStorageGetStoredApplicationUpCountRequestConfig(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, type = type, endDeviceIdsDevEui = endDeviceIdsDevEui, endDeviceIdsJoinEui = endDeviceIdsJoinEui, endDeviceIdsDevAddr = endDeviceIdsDevAddr, after = after, before = before, fPort = fPort, last = last)

        return request<Unit, V3GetStoredApplicationUpCountResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationUpStorageGetStoredApplicationUpCount
    *
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param type Count upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param after Count upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Count upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Count uplinks on a specific FPort only. (optional)
    * @param last Count upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return RequestConfig
    */
    fun applicationUpStorageGetStoredApplicationUpCountRequestConfig(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, type: kotlin.String, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, last: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (endDeviceIdsDevEui != null) {
                    put("end_device_ids.dev_eui", listOf(endDeviceIdsDevEui.toString()))
                }
                if (endDeviceIdsJoinEui != null) {
                    put("end_device_ids.join_eui", listOf(endDeviceIdsJoinEui.toString()))
                }
                if (endDeviceIdsDevAddr != null) {
                    put("end_device_ids.dev_addr", listOf(endDeviceIdsDevAddr.toString()))
                }
                if (after != null) {
                    put("after", listOf(parseDateToQueryString(after)))
                }
                if (before != null) {
                    put("before", listOf(parseDateToQueryString(before)))
                }
                if (fPort != null) {
                    put("f_port", listOf(fPort.toString()))
                }
                if (last != null) {
                    put("last", listOf(last.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/packages/storage/{type}/count".replace("{"+"end_device_ids.application_ids.application_id"+"}", "$endDeviceIdsApplicationIdsApplicationId").replace("{"+"end_device_ids.device_id"+"}", "$endDeviceIdsDeviceId").replace("{"+"type"+"}", "$type"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Returns how many application messages have been stored in the database for an application or end device.
    * 
    * @param applicationIdsApplicationId  
    * @param type Count upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDeviceId  (optional)
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param after Count upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Count upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Count uplinks on a specific FPort only. (optional)
    * @param last Count upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return V3GetStoredApplicationUpCountResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationUpStorageGetStoredApplicationUpCount2(applicationIdsApplicationId: kotlin.String, type: kotlin.String, endDeviceIdsDeviceId: kotlin.String?, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, last: kotlin.String?) : V3GetStoredApplicationUpCountResponse {
        val localVarResponse = applicationUpStorageGetStoredApplicationUpCount2WithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, type = type, endDeviceIdsDeviceId = endDeviceIdsDeviceId, endDeviceIdsDevEui = endDeviceIdsDevEui, endDeviceIdsJoinEui = endDeviceIdsJoinEui, endDeviceIdsDevAddr = endDeviceIdsDevAddr, after = after, before = before, fPort = fPort, last = last)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3GetStoredApplicationUpCountResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Returns how many application messages have been stored in the database for an application or end device.
    * 
    * @param applicationIdsApplicationId  
    * @param type Count upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDeviceId  (optional)
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param after Count upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Count upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Count uplinks on a specific FPort only. (optional)
    * @param last Count upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return ApiInfrastructureResponse<V3GetStoredApplicationUpCountResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationUpStorageGetStoredApplicationUpCount2WithHttpInfo(applicationIdsApplicationId: kotlin.String, type: kotlin.String, endDeviceIdsDeviceId: kotlin.String?, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, last: kotlin.String?) : ApiInfrastructureResponse<V3GetStoredApplicationUpCountResponse?> {
        val localVariableConfig = applicationUpStorageGetStoredApplicationUpCount2RequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, type = type, endDeviceIdsDeviceId = endDeviceIdsDeviceId, endDeviceIdsDevEui = endDeviceIdsDevEui, endDeviceIdsJoinEui = endDeviceIdsJoinEui, endDeviceIdsDevAddr = endDeviceIdsDevAddr, after = after, before = before, fPort = fPort, last = last)

        return request<Unit, V3GetStoredApplicationUpCountResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationUpStorageGetStoredApplicationUpCount2
    *
    * @param applicationIdsApplicationId  
    * @param type Count upstream messages of a specific type. If not set, then all upstream messages are returned. 
    * @param endDeviceIdsDeviceId  (optional)
    * @param endDeviceIdsDevEui The LoRaWAN DevEUI. (optional)
    * @param endDeviceIdsJoinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param endDeviceIdsDevAddr The LoRaWAN DevAddr. (optional)
    * @param after Count upstream messages after this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param before Count upstream messages before this timestamp only. Cannot be used in conjunction with last. (optional)
    * @param fPort Count uplinks on a specific FPort only. (optional)
    * @param last Count upstream messages that have arrived in the last minutes or hours. Cannot be used in conjunction with after and before. (optional)
    * @return RequestConfig
    */
    fun applicationUpStorageGetStoredApplicationUpCount2RequestConfig(applicationIdsApplicationId: kotlin.String, type: kotlin.String, endDeviceIdsDeviceId: kotlin.String?, endDeviceIdsDevEui: kotlin.ByteArray?, endDeviceIdsJoinEui: kotlin.ByteArray?, endDeviceIdsDevAddr: kotlin.ByteArray?, after: java.time.OffsetDateTime?, before: java.time.OffsetDateTime?, fPort: kotlin.Long?, last: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (endDeviceIdsDeviceId != null) {
                    put("end_device_ids.device_id", listOf(endDeviceIdsDeviceId.toString()))
                }
                if (endDeviceIdsDevEui != null) {
                    put("end_device_ids.dev_eui", listOf(endDeviceIdsDevEui.toString()))
                }
                if (endDeviceIdsJoinEui != null) {
                    put("end_device_ids.join_eui", listOf(endDeviceIdsJoinEui.toString()))
                }
                if (endDeviceIdsDevAddr != null) {
                    put("end_device_ids.dev_addr", listOf(endDeviceIdsDevAddr.toString()))
                }
                if (after != null) {
                    put("after", listOf(parseDateToQueryString(after)))
                }
                if (before != null) {
                    put("before", listOf(parseDateToQueryString(before)))
                }
                if (fPort != null) {
                    put("f_port", listOf(fPort.toString()))
                }
                if (last != null) {
                    put("last", listOf(last.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/applications/{application_ids.application_id}/packages/storage/{type}/count".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId").replace("{"+"type"+"}", "$type"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
