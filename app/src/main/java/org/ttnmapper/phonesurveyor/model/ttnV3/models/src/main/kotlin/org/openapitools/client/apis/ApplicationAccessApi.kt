/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3APIKey
import org.openapitools.client.models.V3APIKeys
import org.openapitools.client.models.V3Collaborators
import org.openapitools.client.models.V3CreateApplicationAPIKeyRequest
import org.openapitools.client.models.V3GetCollaboratorResponse
import org.openapitools.client.models.V3Rights
import org.openapitools.client.models.V3SetApplicationCollaboratorRequest
import org.openapitools.client.models.V3UpdateApplicationAPIKeyRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ApplicationAccessApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Create an API key scoped to this application.
    * 
    * @param applicationIdsApplicationId  
    * @param body  
    * @return V3APIKey
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessCreateAPIKey(applicationIdsApplicationId: kotlin.String, body: V3CreateApplicationAPIKeyRequest) : V3APIKey {
        val localVarResponse = applicationAccessCreateAPIKeyWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3APIKey
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create an API key scoped to this application.
    * 
    * @param applicationIdsApplicationId  
    * @param body  
    * @return ApiInfrastructureResponse<V3APIKey?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessCreateAPIKeyWithHttpInfo(applicationIdsApplicationId: kotlin.String, body: V3CreateApplicationAPIKeyRequest) : ApiInfrastructureResponse<V3APIKey?> {
        val localVariableConfig = applicationAccessCreateAPIKeyRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, body = body)

        return request<V3CreateApplicationAPIKeyRequest, V3APIKey>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationAccessCreateAPIKey
    *
    * @param applicationIdsApplicationId  
    * @param body  
    * @return RequestConfig
    */
    fun applicationAccessCreateAPIKeyRequestConfig(applicationIdsApplicationId: kotlin.String, body: V3CreateApplicationAPIKeyRequest) : RequestConfig<V3CreateApplicationAPIKeyRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/applications/{application_ids.application_id}/api-keys".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a single API key of this application.
    * 
    * @param applicationIdsApplicationId  
    * @param keyId Unique public identifier for the API key. 
    * @return V3APIKey
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessGetAPIKey(applicationIdsApplicationId: kotlin.String, keyId: kotlin.String) : V3APIKey {
        val localVarResponse = applicationAccessGetAPIKeyWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, keyId = keyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3APIKey
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get a single API key of this application.
    * 
    * @param applicationIdsApplicationId  
    * @param keyId Unique public identifier for the API key. 
    * @return ApiInfrastructureResponse<V3APIKey?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessGetAPIKeyWithHttpInfo(applicationIdsApplicationId: kotlin.String, keyId: kotlin.String) : ApiInfrastructureResponse<V3APIKey?> {
        val localVariableConfig = applicationAccessGetAPIKeyRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, keyId = keyId)

        return request<Unit, V3APIKey>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationAccessGetAPIKey
    *
    * @param applicationIdsApplicationId  
    * @param keyId Unique public identifier for the API key. 
    * @return RequestConfig
    */
    fun applicationAccessGetAPIKeyRequestConfig(applicationIdsApplicationId: kotlin.String, keyId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/applications/{application_ids.application_id}/api-keys/{key_id}".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId").replace("{"+"key_id"+"}", "$keyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the rights of a collaborator (member) of the application. Pseudo-rights in the response (such as the \&quot;_ALL\&quot; right) are not expanded.
    * 
    * @param applicationIdsApplicationId  
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return V3GetCollaboratorResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessGetCollaborator(applicationIdsApplicationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : V3GetCollaboratorResponse {
        val localVarResponse = applicationAccessGetCollaboratorWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsEmail = collaboratorUserIdsEmail)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3GetCollaboratorResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the rights of a collaborator (member) of the application. Pseudo-rights in the response (such as the \&quot;_ALL\&quot; right) are not expanded.
    * 
    * @param applicationIdsApplicationId  
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return ApiInfrastructureResponse<V3GetCollaboratorResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessGetCollaboratorWithHttpInfo(applicationIdsApplicationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : ApiInfrastructureResponse<V3GetCollaboratorResponse?> {
        val localVariableConfig = applicationAccessGetCollaboratorRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsEmail = collaboratorUserIdsEmail)

        return request<Unit, V3GetCollaboratorResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationAccessGetCollaborator
    *
    * @param applicationIdsApplicationId  
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return RequestConfig
    */
    fun applicationAccessGetCollaboratorRequestConfig(applicationIdsApplicationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorOrganizationIdsOrganizationId != null) {
                    put("collaborator.organization_ids.organization_id", listOf(collaboratorOrganizationIdsOrganizationId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/applications/{application_ids.application_id}/collaborator/user/{collaborator.user_ids.user_id}".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId").replace("{"+"collaborator.user_ids.user_id"+"}", "$collaboratorUserIdsUserId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the rights of a collaborator (member) of the application. Pseudo-rights in the response (such as the \&quot;_ALL\&quot; right) are not expanded.
    * 
    * @param applicationIdsApplicationId  
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return V3GetCollaboratorResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessGetCollaborator2(applicationIdsApplicationId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : V3GetCollaboratorResponse {
        val localVarResponse = applicationAccessGetCollaborator2WithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3GetCollaboratorResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the rights of a collaborator (member) of the application. Pseudo-rights in the response (such as the \&quot;_ALL\&quot; right) are not expanded.
    * 
    * @param applicationIdsApplicationId  
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return ApiInfrastructureResponse<V3GetCollaboratorResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessGetCollaborator2WithHttpInfo(applicationIdsApplicationId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : ApiInfrastructureResponse<V3GetCollaboratorResponse?> {
        val localVariableConfig = applicationAccessGetCollaborator2RequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail)

        return request<Unit, V3GetCollaboratorResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationAccessGetCollaborator2
    *
    * @param applicationIdsApplicationId  
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return RequestConfig
    */
    fun applicationAccessGetCollaborator2RequestConfig(applicationIdsApplicationId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorUserIdsUserId != null) {
                    put("collaborator.user_ids.user_id", listOf(collaboratorUserIdsUserId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/applications/{application_ids.application_id}/collaborator/organization/{collaborator.organization_ids.organization_id}".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId").replace("{"+"collaborator.organization_ids.organization_id"+"}", "$collaboratorOrganizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the API keys for this application.
    * 
    * @param applicationIdsApplicationId  
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return V3APIKeys
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessListAPIKeys(applicationIdsApplicationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : V3APIKeys {
        val localVarResponse = applicationAccessListAPIKeysWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3APIKeys
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the API keys for this application.
    * 
    * @param applicationIdsApplicationId  
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return ApiInfrastructureResponse<V3APIKeys?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessListAPIKeysWithHttpInfo(applicationIdsApplicationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : ApiInfrastructureResponse<V3APIKeys?> {
        val localVariableConfig = applicationAccessListAPIKeysRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, limit = limit, page = page)

        return request<Unit, V3APIKeys>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationAccessListAPIKeys
    *
    * @param applicationIdsApplicationId  
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return RequestConfig
    */
    fun applicationAccessListAPIKeysRequestConfig(applicationIdsApplicationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/applications/{application_ids.application_id}/api-keys".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the collaborators on this application.
    * 
    * @param applicationIdsApplicationId  
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return V3Collaborators
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessListCollaborators(applicationIdsApplicationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : V3Collaborators {
        val localVarResponse = applicationAccessListCollaboratorsWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Collaborators
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the collaborators on this application.
    * 
    * @param applicationIdsApplicationId  
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return ApiInfrastructureResponse<V3Collaborators?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessListCollaboratorsWithHttpInfo(applicationIdsApplicationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : ApiInfrastructureResponse<V3Collaborators?> {
        val localVariableConfig = applicationAccessListCollaboratorsRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, limit = limit, page = page)

        return request<Unit, V3Collaborators>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationAccessListCollaborators
    *
    * @param applicationIdsApplicationId  
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return RequestConfig
    */
    fun applicationAccessListCollaboratorsRequestConfig(applicationIdsApplicationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/applications/{application_ids.application_id}/collaborators".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the rights the caller has on this application.
    * 
    * @param applicationId  
    * @return V3Rights
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessListRights(applicationId: kotlin.String) : V3Rights {
        val localVarResponse = applicationAccessListRightsWithHttpInfo(applicationId = applicationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Rights
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the rights the caller has on this application.
    * 
    * @param applicationId  
    * @return ApiInfrastructureResponse<V3Rights?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessListRightsWithHttpInfo(applicationId: kotlin.String) : ApiInfrastructureResponse<V3Rights?> {
        val localVariableConfig = applicationAccessListRightsRequestConfig(applicationId = applicationId)

        return request<Unit, V3Rights>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationAccessListRights
    *
    * @param applicationId  
    * @return RequestConfig
    */
    fun applicationAccessListRightsRequestConfig(applicationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/applications/{application_id}/rights".replace("{"+"application_id"+"}", "$applicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set the rights of a collaborator (member) on the application. This method can also be used to delete the collaborator, by giving them no rights. The caller is required to have all assigned or/and removed rights.
    * 
    * @param applicationIdsApplicationId  
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessSetCollaborator(applicationIdsApplicationId: kotlin.String, body: V3SetApplicationCollaboratorRequest) : kotlin.Any {
        val localVarResponse = applicationAccessSetCollaboratorWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set the rights of a collaborator (member) on the application. This method can also be used to delete the collaborator, by giving them no rights. The caller is required to have all assigned or/and removed rights.
    * 
    * @param applicationIdsApplicationId  
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessSetCollaboratorWithHttpInfo(applicationIdsApplicationId: kotlin.String, body: V3SetApplicationCollaboratorRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = applicationAccessSetCollaboratorRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, body = body)

        return request<V3SetApplicationCollaboratorRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationAccessSetCollaborator
    *
    * @param applicationIdsApplicationId  
    * @param body  
    * @return RequestConfig
    */
    fun applicationAccessSetCollaboratorRequestConfig(applicationIdsApplicationId: kotlin.String, body: V3SetApplicationCollaboratorRequest) : RequestConfig<V3SetApplicationCollaboratorRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/applications/{application_ids.application_id}/collaborators".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update the rights of an API key of the application. This method can also be used to delete the API key, by giving it no rights. The caller is required to have all assigned or/and removed rights.
    * 
    * @param applicationIdsApplicationId  
    * @param apiKeyId Immutable and unique public identifier for the API key. Generated by the Access Server. 
    * @param body  
    * @return V3APIKey
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessUpdateAPIKey(applicationIdsApplicationId: kotlin.String, apiKeyId: kotlin.String, body: V3UpdateApplicationAPIKeyRequest) : V3APIKey {
        val localVarResponse = applicationAccessUpdateAPIKeyWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, apiKeyId = apiKeyId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3APIKey
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update the rights of an API key of the application. This method can also be used to delete the API key, by giving it no rights. The caller is required to have all assigned or/and removed rights.
    * 
    * @param applicationIdsApplicationId  
    * @param apiKeyId Immutable and unique public identifier for the API key. Generated by the Access Server. 
    * @param body  
    * @return ApiInfrastructureResponse<V3APIKey?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationAccessUpdateAPIKeyWithHttpInfo(applicationIdsApplicationId: kotlin.String, apiKeyId: kotlin.String, body: V3UpdateApplicationAPIKeyRequest) : ApiInfrastructureResponse<V3APIKey?> {
        val localVariableConfig = applicationAccessUpdateAPIKeyRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, apiKeyId = apiKeyId, body = body)

        return request<V3UpdateApplicationAPIKeyRequest, V3APIKey>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationAccessUpdateAPIKey
    *
    * @param applicationIdsApplicationId  
    * @param apiKeyId Immutable and unique public identifier for the API key. Generated by the Access Server. 
    * @param body  
    * @return RequestConfig
    */
    fun applicationAccessUpdateAPIKeyRequestConfig(applicationIdsApplicationId: kotlin.String, apiKeyId: kotlin.String, body: V3UpdateApplicationAPIKeyRequest) : RequestConfig<V3UpdateApplicationAPIKeyRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/applications/{application_ids.application_id}/api-keys/{api_key.id}".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId").replace("{"+"api_key.id"+"}", "$apiKeyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
