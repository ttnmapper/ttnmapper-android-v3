/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 * 
 *
 * Values: pHYUNKNOWN,tS001V10,tS001V101,rP001V102,rP001V102REVB,rP001V11REVA,rP001V11REVB,rP001V103REVA,rP002V100,rP002V101,rP002V102,rP002V103
 */

enum class V3PHYVersion(val value: kotlin.String) {

    @Json(name = "PHY_UNKNOWN")
    pHYUNKNOWN("PHY_UNKNOWN"),

    @Json(name = "TS001_V1_0")
    tS001V10("TS001_V1_0"),

    @Json(name = "TS001_V1_0_1")
    tS001V101("TS001_V1_0_1"),

    @Json(name = "RP001_V1_0_2")
    rP001V102("RP001_V1_0_2"),

    @Json(name = "RP001_V1_0_2_REV_B")
    rP001V102REVB("RP001_V1_0_2_REV_B"),

    @Json(name = "RP001_V1_1_REV_A")
    rP001V11REVA("RP001_V1_1_REV_A"),

    @Json(name = "RP001_V1_1_REV_B")
    rP001V11REVB("RP001_V1_1_REV_B"),

    @Json(name = "RP001_V1_0_3_REV_A")
    rP001V103REVA("RP001_V1_0_3_REV_A"),

    @Json(name = "RP002_V1_0_0")
    rP002V100("RP002_V1_0_0"),

    @Json(name = "RP002_V1_0_1")
    rP002V101("RP002_V1_0_1"),

    @Json(name = "RP002_V1_0_2")
    rP002V102("RP002_V1_0_2"),

    @Json(name = "RP002_V1_0_3")
    rP002V103("RP002_V1_0_3");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is V3PHYVersion) "$data" else null

        /**
         * Returns a valid [V3PHYVersion] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): V3PHYVersion? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

