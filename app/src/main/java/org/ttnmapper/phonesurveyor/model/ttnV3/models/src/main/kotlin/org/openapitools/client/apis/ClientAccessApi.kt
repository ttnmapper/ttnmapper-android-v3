/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3Collaborators
import org.openapitools.client.models.V3GetCollaboratorResponse
import org.openapitools.client.models.V3Rights
import org.openapitools.client.models.V3SetClientCollaboratorRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ClientAccessApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Get the rights of a collaborator (member) of the client. Pseudo-rights in the response (such as the \&quot;_ALL\&quot; right) are not expanded.
    * 
    * @param clientIdsClientId  
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return V3GetCollaboratorResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientAccessGetCollaborator(clientIdsClientId: kotlin.String, collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : V3GetCollaboratorResponse {
        val localVarResponse = clientAccessGetCollaboratorWithHttpInfo(clientIdsClientId = clientIdsClientId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsEmail = collaboratorUserIdsEmail)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3GetCollaboratorResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the rights of a collaborator (member) of the client. Pseudo-rights in the response (such as the \&quot;_ALL\&quot; right) are not expanded.
    * 
    * @param clientIdsClientId  
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return ApiInfrastructureResponse<V3GetCollaboratorResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientAccessGetCollaboratorWithHttpInfo(clientIdsClientId: kotlin.String, collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : ApiInfrastructureResponse<V3GetCollaboratorResponse?> {
        val localVariableConfig = clientAccessGetCollaboratorRequestConfig(clientIdsClientId = clientIdsClientId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsEmail = collaboratorUserIdsEmail)

        return request<Unit, V3GetCollaboratorResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientAccessGetCollaborator
    *
    * @param clientIdsClientId  
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return RequestConfig
    */
    fun clientAccessGetCollaboratorRequestConfig(clientIdsClientId: kotlin.String, collaboratorUserIdsUserId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorOrganizationIdsOrganizationId != null) {
                    put("collaborator.organization_ids.organization_id", listOf(collaboratorOrganizationIdsOrganizationId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/clients/{client_ids.client_id}/collaborator/user/{collaborator.user_ids.user_id}".replace("{"+"client_ids.client_id"+"}", "$clientIdsClientId").replace("{"+"collaborator.user_ids.user_id"+"}", "$collaboratorUserIdsUserId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the rights of a collaborator (member) of the client. Pseudo-rights in the response (such as the \&quot;_ALL\&quot; right) are not expanded.
    * 
    * @param clientIdsClientId  
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return V3GetCollaboratorResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientAccessGetCollaborator2(clientIdsClientId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : V3GetCollaboratorResponse {
        val localVarResponse = clientAccessGetCollaborator2WithHttpInfo(clientIdsClientId = clientIdsClientId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3GetCollaboratorResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the rights of a collaborator (member) of the client. Pseudo-rights in the response (such as the \&quot;_ALL\&quot; right) are not expanded.
    * 
    * @param clientIdsClientId  
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return ApiInfrastructureResponse<V3GetCollaboratorResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientAccessGetCollaborator2WithHttpInfo(clientIdsClientId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : ApiInfrastructureResponse<V3GetCollaboratorResponse?> {
        val localVariableConfig = clientAccessGetCollaborator2RequestConfig(clientIdsClientId = clientIdsClientId, collaboratorOrganizationIdsOrganizationId = collaboratorOrganizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail)

        return request<Unit, V3GetCollaboratorResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientAccessGetCollaborator2
    *
    * @param clientIdsClientId  
    * @param collaboratorOrganizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. (optional)
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return RequestConfig
    */
    fun clientAccessGetCollaborator2RequestConfig(clientIdsClientId: kotlin.String, collaboratorOrganizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String?, collaboratorUserIdsEmail: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorUserIdsUserId != null) {
                    put("collaborator.user_ids.user_id", listOf(collaboratorUserIdsUserId.toString()))
                }
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/clients/{client_ids.client_id}/collaborator/organization/{collaborator.organization_ids.organization_id}".replace("{"+"client_ids.client_id"+"}", "$clientIdsClientId").replace("{"+"collaborator.organization_ids.organization_id"+"}", "$collaboratorOrganizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the collaborators on this OAuth client.
    * 
    * @param clientIdsClientId  
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return V3Collaborators
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientAccessListCollaborators(clientIdsClientId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : V3Collaborators {
        val localVarResponse = clientAccessListCollaboratorsWithHttpInfo(clientIdsClientId = clientIdsClientId, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Collaborators
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the collaborators on this OAuth client.
    * 
    * @param clientIdsClientId  
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return ApiInfrastructureResponse<V3Collaborators?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientAccessListCollaboratorsWithHttpInfo(clientIdsClientId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : ApiInfrastructureResponse<V3Collaborators?> {
        val localVariableConfig = clientAccessListCollaboratorsRequestConfig(clientIdsClientId = clientIdsClientId, limit = limit, page = page)

        return request<Unit, V3Collaborators>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientAccessListCollaborators
    *
    * @param clientIdsClientId  
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return RequestConfig
    */
    fun clientAccessListCollaboratorsRequestConfig(clientIdsClientId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/clients/{client_ids.client_id}/collaborators".replace("{"+"client_ids.client_id"+"}", "$clientIdsClientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the rights the caller has on this application.
    * 
    * @param clientId  
    * @return V3Rights
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientAccessListRights(clientId: kotlin.String) : V3Rights {
        val localVarResponse = clientAccessListRightsWithHttpInfo(clientId = clientId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Rights
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the rights the caller has on this application.
    * 
    * @param clientId  
    * @return ApiInfrastructureResponse<V3Rights?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientAccessListRightsWithHttpInfo(clientId: kotlin.String) : ApiInfrastructureResponse<V3Rights?> {
        val localVariableConfig = clientAccessListRightsRequestConfig(clientId = clientId)

        return request<Unit, V3Rights>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientAccessListRights
    *
    * @param clientId  
    * @return RequestConfig
    */
    fun clientAccessListRightsRequestConfig(clientId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/clients/{client_id}/rights".replace("{"+"client_id"+"}", "$clientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set the rights of a collaborator (member) on the OAuth client. This method can also be used to delete the collaborator, by giving them no rights. The caller is required to have all assigned or/and removed rights.
    * 
    * @param clientIdsClientId  
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientAccessSetCollaborator(clientIdsClientId: kotlin.String, body: V3SetClientCollaboratorRequest) : kotlin.Any {
        val localVarResponse = clientAccessSetCollaboratorWithHttpInfo(clientIdsClientId = clientIdsClientId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set the rights of a collaborator (member) on the OAuth client. This method can also be used to delete the collaborator, by giving them no rights. The caller is required to have all assigned or/and removed rights.
    * 
    * @param clientIdsClientId  
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientAccessSetCollaboratorWithHttpInfo(clientIdsClientId: kotlin.String, body: V3SetClientCollaboratorRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = clientAccessSetCollaboratorRequestConfig(clientIdsClientId = clientIdsClientId, body = body)

        return request<V3SetClientCollaboratorRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation clientAccessSetCollaborator
    *
    * @param clientIdsClientId  
    * @param body  
    * @return RequestConfig
    */
    fun clientAccessSetCollaboratorRequestConfig(clientIdsClientId: kotlin.String, body: V3SetClientCollaboratorRequest) : RequestConfig<V3SetClientCollaboratorRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/clients/{client_ids.client_id}/collaborators".replace("{"+"client_ids.client_id"+"}", "$clientIdsClientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
