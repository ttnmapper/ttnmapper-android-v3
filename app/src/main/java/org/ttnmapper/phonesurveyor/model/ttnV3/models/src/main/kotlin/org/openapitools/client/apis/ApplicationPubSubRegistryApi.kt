/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3ApplicationPubSub
import org.openapitools.client.models.V3ApplicationPubSubFormats
import org.openapitools.client.models.V3ApplicationPubSubs
import org.openapitools.client.models.V3SetApplicationPubSubRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ApplicationPubSubRegistryApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param applicationIdsApplicationId  
    * @param pubSubId  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistryDelete(applicationIdsApplicationId: kotlin.String, pubSubId: kotlin.String) : kotlin.Any {
        val localVarResponse = applicationPubSubRegistryDeleteWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, pubSubId = pubSubId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param applicationIdsApplicationId  
    * @param pubSubId  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistryDeleteWithHttpInfo(applicationIdsApplicationId: kotlin.String, pubSubId: kotlin.String) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = applicationPubSubRegistryDeleteRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, pubSubId = pubSubId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationPubSubRegistryDelete
    *
    * @param applicationIdsApplicationId  
    * @param pubSubId  
    * @return RequestConfig
    */
    fun applicationPubSubRegistryDeleteRequestConfig(applicationIdsApplicationId: kotlin.String, pubSubId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/as/pubsub/{application_ids.application_id}/{pub_sub_id}".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId").replace("{"+"pub_sub_id"+"}", "$pubSubId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param idsApplicationIdsApplicationId  
    * @param idsPubSubId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return V3ApplicationPubSub
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistryGet(idsApplicationIdsApplicationId: kotlin.String, idsPubSubId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : V3ApplicationPubSub {
        val localVarResponse = applicationPubSubRegistryGetWithHttpInfo(idsApplicationIdsApplicationId = idsApplicationIdsApplicationId, idsPubSubId = idsPubSubId, fieldMaskPaths = fieldMaskPaths)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationPubSub
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param idsApplicationIdsApplicationId  
    * @param idsPubSubId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return ApiInfrastructureResponse<V3ApplicationPubSub?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistryGetWithHttpInfo(idsApplicationIdsApplicationId: kotlin.String, idsPubSubId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : ApiInfrastructureResponse<V3ApplicationPubSub?> {
        val localVariableConfig = applicationPubSubRegistryGetRequestConfig(idsApplicationIdsApplicationId = idsApplicationIdsApplicationId, idsPubSubId = idsPubSubId, fieldMaskPaths = fieldMaskPaths)

        return request<Unit, V3ApplicationPubSub>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationPubSubRegistryGet
    *
    * @param idsApplicationIdsApplicationId  
    * @param idsPubSubId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return RequestConfig
    */
    fun applicationPubSubRegistryGetRequestConfig(idsApplicationIdsApplicationId: kotlin.String, idsPubSubId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/pubsub/{ids.application_ids.application_id}/{ids.pub_sub_id}".replace("{"+"ids.application_ids.application_id"+"}", "$idsApplicationIdsApplicationId").replace("{"+"ids.pub_sub_id"+"}", "$idsPubSubId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @return V3ApplicationPubSubFormats
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistryGetFormats() : V3ApplicationPubSubFormats {
        val localVarResponse = applicationPubSubRegistryGetFormatsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationPubSubFormats
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @return ApiInfrastructureResponse<V3ApplicationPubSubFormats?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistryGetFormatsWithHttpInfo() : ApiInfrastructureResponse<V3ApplicationPubSubFormats?> {
        val localVariableConfig = applicationPubSubRegistryGetFormatsRequestConfig()

        return request<Unit, V3ApplicationPubSubFormats>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationPubSubRegistryGetFormats
    *
    * @return RequestConfig
    */
    fun applicationPubSubRegistryGetFormatsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/pubsub-formats",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param applicationIdsApplicationId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return V3ApplicationPubSubs
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistryList(applicationIdsApplicationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : V3ApplicationPubSubs {
        val localVarResponse = applicationPubSubRegistryListWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, fieldMaskPaths = fieldMaskPaths)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationPubSubs
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param applicationIdsApplicationId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return ApiInfrastructureResponse<V3ApplicationPubSubs?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistryListWithHttpInfo(applicationIdsApplicationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : ApiInfrastructureResponse<V3ApplicationPubSubs?> {
        val localVariableConfig = applicationPubSubRegistryListRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, fieldMaskPaths = fieldMaskPaths)

        return request<Unit, V3ApplicationPubSubs>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationPubSubRegistryList
    *
    * @param applicationIdsApplicationId  
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @return RequestConfig
    */
    fun applicationPubSubRegistryListRequestConfig(applicationIdsApplicationId: kotlin.String, fieldMaskPaths: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/pubsub/{application_ids.application_id}".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param pubsubIdsApplicationIdsApplicationId  
    * @param pubsubIdsPubSubId  
    * @param body  
    * @return V3ApplicationPubSub
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistrySet(pubsubIdsApplicationIdsApplicationId: kotlin.String, pubsubIdsPubSubId: kotlin.String, body: V3SetApplicationPubSubRequest) : V3ApplicationPubSub {
        val localVarResponse = applicationPubSubRegistrySetWithHttpInfo(pubsubIdsApplicationIdsApplicationId = pubsubIdsApplicationIdsApplicationId, pubsubIdsPubSubId = pubsubIdsPubSubId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationPubSub
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param pubsubIdsApplicationIdsApplicationId  
    * @param pubsubIdsPubSubId  
    * @param body  
    * @return ApiInfrastructureResponse<V3ApplicationPubSub?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistrySetWithHttpInfo(pubsubIdsApplicationIdsApplicationId: kotlin.String, pubsubIdsPubSubId: kotlin.String, body: V3SetApplicationPubSubRequest) : ApiInfrastructureResponse<V3ApplicationPubSub?> {
        val localVariableConfig = applicationPubSubRegistrySetRequestConfig(pubsubIdsApplicationIdsApplicationId = pubsubIdsApplicationIdsApplicationId, pubsubIdsPubSubId = pubsubIdsPubSubId, body = body)

        return request<V3SetApplicationPubSubRequest, V3ApplicationPubSub>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationPubSubRegistrySet
    *
    * @param pubsubIdsApplicationIdsApplicationId  
    * @param pubsubIdsPubSubId  
    * @param body  
    * @return RequestConfig
    */
    fun applicationPubSubRegistrySetRequestConfig(pubsubIdsApplicationIdsApplicationId: kotlin.String, pubsubIdsPubSubId: kotlin.String, body: V3SetApplicationPubSubRequest) : RequestConfig<V3SetApplicationPubSubRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/as/pubsub/{pubsub.ids.application_ids.application_id}/{pubsub.ids.pub_sub_id}".replace("{"+"pubsub.ids.application_ids.application_id"+"}", "$pubsubIdsApplicationIdsApplicationId").replace("{"+"pubsub.ids.pub_sub_id"+"}", "$pubsubIdsPubSubId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param pubsubIdsApplicationIdsApplicationId  
    * @param body  
    * @return V3ApplicationPubSub
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistrySet2(pubsubIdsApplicationIdsApplicationId: kotlin.String, body: V3SetApplicationPubSubRequest) : V3ApplicationPubSub {
        val localVarResponse = applicationPubSubRegistrySet2WithHttpInfo(pubsubIdsApplicationIdsApplicationId = pubsubIdsApplicationIdsApplicationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationPubSub
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param pubsubIdsApplicationIdsApplicationId  
    * @param body  
    * @return ApiInfrastructureResponse<V3ApplicationPubSub?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun applicationPubSubRegistrySet2WithHttpInfo(pubsubIdsApplicationIdsApplicationId: kotlin.String, body: V3SetApplicationPubSubRequest) : ApiInfrastructureResponse<V3ApplicationPubSub?> {
        val localVariableConfig = applicationPubSubRegistrySet2RequestConfig(pubsubIdsApplicationIdsApplicationId = pubsubIdsApplicationIdsApplicationId, body = body)

        return request<V3SetApplicationPubSubRequest, V3ApplicationPubSub>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation applicationPubSubRegistrySet2
    *
    * @param pubsubIdsApplicationIdsApplicationId  
    * @param body  
    * @return RequestConfig
    */
    fun applicationPubSubRegistrySet2RequestConfig(pubsubIdsApplicationIdsApplicationId: kotlin.String, body: V3SetApplicationPubSubRequest) : RequestConfig<V3SetApplicationPubSubRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/as/pubsub/{pubsub.ids.application_ids.application_id}".replace("{"+"pubsub.ids.application_ids.application_id"+"}", "$pubsubIdsApplicationIdsApplicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
