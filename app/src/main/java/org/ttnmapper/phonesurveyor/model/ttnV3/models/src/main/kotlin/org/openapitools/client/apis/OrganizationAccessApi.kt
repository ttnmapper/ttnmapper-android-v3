/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3APIKey
import org.openapitools.client.models.V3APIKeys
import org.openapitools.client.models.V3Collaborators
import org.openapitools.client.models.V3CreateOrganizationAPIKeyRequest
import org.openapitools.client.models.V3GetCollaboratorResponse
import org.openapitools.client.models.V3Rights
import org.openapitools.client.models.V3SetOrganizationCollaboratorRequest
import org.openapitools.client.models.V3UpdateOrganizationAPIKeyRequest

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class OrganizationAccessApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Create an API key scoped to this organization. Organization API keys can give access to the organization itself, as well as any application, gateway and OAuth client this organization is a collaborator of.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return V3APIKey
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessCreateAPIKey(organizationIdsOrganizationId: kotlin.String, body: V3CreateOrganizationAPIKeyRequest) : V3APIKey {
        val localVarResponse = organizationAccessCreateAPIKeyWithHttpInfo(organizationIdsOrganizationId = organizationIdsOrganizationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3APIKey
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create an API key scoped to this organization. Organization API keys can give access to the organization itself, as well as any application, gateway and OAuth client this organization is a collaborator of.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return ApiInfrastructureResponse<V3APIKey?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessCreateAPIKeyWithHttpInfo(organizationIdsOrganizationId: kotlin.String, body: V3CreateOrganizationAPIKeyRequest) : ApiInfrastructureResponse<V3APIKey?> {
        val localVariableConfig = organizationAccessCreateAPIKeyRequestConfig(organizationIdsOrganizationId = organizationIdsOrganizationId, body = body)

        return request<V3CreateOrganizationAPIKeyRequest, V3APIKey>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationAccessCreateAPIKey
    *
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return RequestConfig
    */
    fun organizationAccessCreateAPIKeyRequestConfig(organizationIdsOrganizationId: kotlin.String, body: V3CreateOrganizationAPIKeyRequest) : RequestConfig<V3CreateOrganizationAPIKeyRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/organizations/{organization_ids.organization_id}/api-keys".replace("{"+"organization_ids.organization_id"+"}", "$organizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a single API key of this organization.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param keyId Unique public identifier for the API key. 
    * @return V3APIKey
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessGetAPIKey(organizationIdsOrganizationId: kotlin.String, keyId: kotlin.String) : V3APIKey {
        val localVarResponse = organizationAccessGetAPIKeyWithHttpInfo(organizationIdsOrganizationId = organizationIdsOrganizationId, keyId = keyId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3APIKey
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get a single API key of this organization.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param keyId Unique public identifier for the API key. 
    * @return ApiInfrastructureResponse<V3APIKey?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessGetAPIKeyWithHttpInfo(organizationIdsOrganizationId: kotlin.String, keyId: kotlin.String) : ApiInfrastructureResponse<V3APIKey?> {
        val localVariableConfig = organizationAccessGetAPIKeyRequestConfig(organizationIdsOrganizationId = organizationIdsOrganizationId, keyId = keyId)

        return request<Unit, V3APIKey>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationAccessGetAPIKey
    *
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param keyId Unique public identifier for the API key. 
    * @return RequestConfig
    */
    fun organizationAccessGetAPIKeyRequestConfig(organizationIdsOrganizationId: kotlin.String, keyId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{organization_ids.organization_id}/api-keys/{key_id}".replace("{"+"organization_ids.organization_id"+"}", "$organizationIdsOrganizationId").replace("{"+"key_id"+"}", "$keyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the rights of a collaborator (member) of the organization. Pseudo-rights in the response (such as the \&quot;_ALL\&quot; right) are not expanded.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return V3GetCollaboratorResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessGetCollaborator(organizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String, collaboratorUserIdsEmail: kotlin.String?) : V3GetCollaboratorResponse {
        val localVarResponse = organizationAccessGetCollaboratorWithHttpInfo(organizationIdsOrganizationId = organizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3GetCollaboratorResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the rights of a collaborator (member) of the organization. Pseudo-rights in the response (such as the \&quot;_ALL\&quot; right) are not expanded.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return ApiInfrastructureResponse<V3GetCollaboratorResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessGetCollaboratorWithHttpInfo(organizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String, collaboratorUserIdsEmail: kotlin.String?) : ApiInfrastructureResponse<V3GetCollaboratorResponse?> {
        val localVariableConfig = organizationAccessGetCollaboratorRequestConfig(organizationIdsOrganizationId = organizationIdsOrganizationId, collaboratorUserIdsUserId = collaboratorUserIdsUserId, collaboratorUserIdsEmail = collaboratorUserIdsEmail)

        return request<Unit, V3GetCollaboratorResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationAccessGetCollaborator
    *
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param collaboratorUserIdsUserId This ID shares namespace with organization IDs. 
    * @param collaboratorUserIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return RequestConfig
    */
    fun organizationAccessGetCollaboratorRequestConfig(organizationIdsOrganizationId: kotlin.String, collaboratorUserIdsUserId: kotlin.String, collaboratorUserIdsEmail: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (collaboratorUserIdsEmail != null) {
                    put("collaborator.user_ids.email", listOf(collaboratorUserIdsEmail.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{organization_ids.organization_id}/collaborator/user/{collaborator.user_ids.user_id}".replace("{"+"organization_ids.organization_id"+"}", "$organizationIdsOrganizationId").replace("{"+"collaborator.user_ids.user_id"+"}", "$collaboratorUserIdsUserId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the API keys for this organization.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return V3APIKeys
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessListAPIKeys(organizationIdsOrganizationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : V3APIKeys {
        val localVarResponse = organizationAccessListAPIKeysWithHttpInfo(organizationIdsOrganizationId = organizationIdsOrganizationId, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3APIKeys
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the API keys for this organization.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return ApiInfrastructureResponse<V3APIKeys?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessListAPIKeysWithHttpInfo(organizationIdsOrganizationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : ApiInfrastructureResponse<V3APIKeys?> {
        val localVariableConfig = organizationAccessListAPIKeysRequestConfig(organizationIdsOrganizationId = organizationIdsOrganizationId, limit = limit, page = page)

        return request<Unit, V3APIKeys>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationAccessListAPIKeys
    *
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return RequestConfig
    */
    fun organizationAccessListAPIKeysRequestConfig(organizationIdsOrganizationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{organization_ids.organization_id}/api-keys".replace("{"+"organization_ids.organization_id"+"}", "$organizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the collaborators on this organization.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return V3Collaborators
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessListCollaborators(organizationIdsOrganizationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : V3Collaborators {
        val localVarResponse = organizationAccessListCollaboratorsWithHttpInfo(organizationIdsOrganizationId = organizationIdsOrganizationId, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Collaborators
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the collaborators on this organization.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return ApiInfrastructureResponse<V3Collaborators?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessListCollaboratorsWithHttpInfo(organizationIdsOrganizationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : ApiInfrastructureResponse<V3Collaborators?> {
        val localVariableConfig = organizationAccessListCollaboratorsRequestConfig(organizationIdsOrganizationId = organizationIdsOrganizationId, limit = limit, page = page)

        return request<Unit, V3Collaborators>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationAccessListCollaborators
    *
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return RequestConfig
    */
    fun organizationAccessListCollaboratorsRequestConfig(organizationIdsOrganizationId: kotlin.String, limit: kotlin.Long?, page: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{organization_ids.organization_id}/collaborators".replace("{"+"organization_ids.organization_id"+"}", "$organizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the rights the caller has on this organization.
    * 
    * @param organizationId This ID shares namespace with user IDs. 
    * @return V3Rights
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessListRights(organizationId: kotlin.String) : V3Rights {
        val localVarResponse = organizationAccessListRightsWithHttpInfo(organizationId = organizationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Rights
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the rights the caller has on this organization.
    * 
    * @param organizationId This ID shares namespace with user IDs. 
    * @return ApiInfrastructureResponse<V3Rights?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessListRightsWithHttpInfo(organizationId: kotlin.String) : ApiInfrastructureResponse<V3Rights?> {
        val localVariableConfig = organizationAccessListRightsRequestConfig(organizationId = organizationId)

        return request<Unit, V3Rights>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationAccessListRights
    *
    * @param organizationId This ID shares namespace with user IDs. 
    * @return RequestConfig
    */
    fun organizationAccessListRightsRequestConfig(organizationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/organizations/{organization_id}/rights".replace("{"+"organization_id"+"}", "$organizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Set the rights of a collaborator (member) on the organization. Organization collaborators can get access to the organization itself, as well as any application, gateway and OAuth client this organization is a collaborator of. This method can also be used to delete the collaborator, by giving them no rights. The caller is required to have all assigned or/and removed rights.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessSetCollaborator(organizationIdsOrganizationId: kotlin.String, body: V3SetOrganizationCollaboratorRequest) : kotlin.Any {
        val localVarResponse = organizationAccessSetCollaboratorWithHttpInfo(organizationIdsOrganizationId = organizationIdsOrganizationId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Set the rights of a collaborator (member) on the organization. Organization collaborators can get access to the organization itself, as well as any application, gateway and OAuth client this organization is a collaborator of. This method can also be used to delete the collaborator, by giving them no rights. The caller is required to have all assigned or/and removed rights.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessSetCollaboratorWithHttpInfo(organizationIdsOrganizationId: kotlin.String, body: V3SetOrganizationCollaboratorRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = organizationAccessSetCollaboratorRequestConfig(organizationIdsOrganizationId = organizationIdsOrganizationId, body = body)

        return request<V3SetOrganizationCollaboratorRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationAccessSetCollaborator
    *
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param body  
    * @return RequestConfig
    */
    fun organizationAccessSetCollaboratorRequestConfig(organizationIdsOrganizationId: kotlin.String, body: V3SetOrganizationCollaboratorRequest) : RequestConfig<V3SetOrganizationCollaboratorRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/organizations/{organization_ids.organization_id}/collaborators".replace("{"+"organization_ids.organization_id"+"}", "$organizationIdsOrganizationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update the rights of an API key of the organization. This method can also be used to delete the API key, by giving it no rights. The caller is required to have all assigned or/and removed rights.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param apiKeyId Immutable and unique public identifier for the API key. Generated by the Access Server. 
    * @param body  
    * @return V3APIKey
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessUpdateAPIKey(organizationIdsOrganizationId: kotlin.String, apiKeyId: kotlin.String, body: V3UpdateOrganizationAPIKeyRequest) : V3APIKey {
        val localVarResponse = organizationAccessUpdateAPIKeyWithHttpInfo(organizationIdsOrganizationId = organizationIdsOrganizationId, apiKeyId = apiKeyId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3APIKey
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Update the rights of an API key of the organization. This method can also be used to delete the API key, by giving it no rights. The caller is required to have all assigned or/and removed rights.
    * 
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param apiKeyId Immutable and unique public identifier for the API key. Generated by the Access Server. 
    * @param body  
    * @return ApiInfrastructureResponse<V3APIKey?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun organizationAccessUpdateAPIKeyWithHttpInfo(organizationIdsOrganizationId: kotlin.String, apiKeyId: kotlin.String, body: V3UpdateOrganizationAPIKeyRequest) : ApiInfrastructureResponse<V3APIKey?> {
        val localVariableConfig = organizationAccessUpdateAPIKeyRequestConfig(organizationIdsOrganizationId = organizationIdsOrganizationId, apiKeyId = apiKeyId, body = body)

        return request<V3UpdateOrganizationAPIKeyRequest, V3APIKey>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation organizationAccessUpdateAPIKey
    *
    * @param organizationIdsOrganizationId This ID shares namespace with user IDs. 
    * @param apiKeyId Immutable and unique public identifier for the API key. Generated by the Access Server. 
    * @param body  
    * @return RequestConfig
    */
    fun organizationAccessUpdateAPIKeyRequestConfig(organizationIdsOrganizationId: kotlin.String, apiKeyId: kotlin.String, body: V3UpdateOrganizationAPIKeyRequest) : RequestConfig<V3UpdateOrganizationAPIKeyRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/organizations/{organization_ids.organization_id}/api-keys/{api_key.id}".replace("{"+"organization_ids.organization_id"+"}", "$organizationIdsOrganizationId").replace("{"+"api_key.id"+"}", "$apiKeyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
