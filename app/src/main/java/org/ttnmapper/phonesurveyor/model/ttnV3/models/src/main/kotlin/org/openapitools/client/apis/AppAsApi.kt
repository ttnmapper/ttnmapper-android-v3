/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3ApplicationDownlinks
import org.openapitools.client.models.V3ApplicationUp
import org.openapitools.client.models.V3DecodeDownlinkRequest
import org.openapitools.client.models.V3DecodeDownlinkResponse
import org.openapitools.client.models.V3DecodeUplinkRequest
import org.openapitools.client.models.V3DecodeUplinkResponse
import org.openapitools.client.models.V3DownlinkQueueRequest
import org.openapitools.client.models.V3EncodeDownlinkRequest
import org.openapitools.client.models.V3EncodeDownlinkResponse
import org.openapitools.client.models.V3MQTTConnectionInfo

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class AppAsApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return V3DecodeDownlinkResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsDecodeDownlink(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DecodeDownlinkRequest) : V3DecodeDownlinkResponse {
        val localVarResponse = appAsDecodeDownlinkWithHttpInfo(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3DecodeDownlinkResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return ApiInfrastructureResponse<V3DecodeDownlinkResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsDecodeDownlinkWithHttpInfo(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DecodeDownlinkRequest) : ApiInfrastructureResponse<V3DecodeDownlinkResponse?> {
        val localVariableConfig = appAsDecodeDownlinkRequestConfig(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return request<V3DecodeDownlinkRequest, V3DecodeDownlinkResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation appAsDecodeDownlink
    *
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return RequestConfig
    */
    fun appAsDecodeDownlinkRequestConfig(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DecodeDownlinkRequest) : RequestConfig<V3DecodeDownlinkRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/decode".replace("{"+"end_device_ids.application_ids.application_id"+"}", "$endDeviceIdsApplicationIdsApplicationId").replace("{"+"end_device_ids.device_id"+"}", "$endDeviceIdsDeviceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return V3DecodeUplinkResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsDecodeUplink(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DecodeUplinkRequest) : V3DecodeUplinkResponse {
        val localVarResponse = appAsDecodeUplinkWithHttpInfo(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3DecodeUplinkResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return ApiInfrastructureResponse<V3DecodeUplinkResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsDecodeUplinkWithHttpInfo(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DecodeUplinkRequest) : ApiInfrastructureResponse<V3DecodeUplinkResponse?> {
        val localVariableConfig = appAsDecodeUplinkRequestConfig(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return request<V3DecodeUplinkRequest, V3DecodeUplinkResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation appAsDecodeUplink
    *
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return RequestConfig
    */
    fun appAsDecodeUplinkRequestConfig(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DecodeUplinkRequest) : RequestConfig<V3DecodeUplinkRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/up/decode".replace("{"+"end_device_ids.application_ids.application_id"+"}", "$endDeviceIdsApplicationIdsApplicationId").replace("{"+"end_device_ids.device_id"+"}", "$endDeviceIdsDeviceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List the items currently in the downlink queue.
    * 
    * @param applicationIdsApplicationId  
    * @param deviceId  
    * @param devEui The LoRaWAN DevEUI. (optional)
    * @param joinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param devAddr The LoRaWAN DevAddr. (optional)
    * @return V3ApplicationDownlinks
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsDownlinkQueueList(applicationIdsApplicationId: kotlin.String, deviceId: kotlin.String, devEui: kotlin.ByteArray?, joinEui: kotlin.ByteArray?, devAddr: kotlin.ByteArray?) : V3ApplicationDownlinks {
        val localVarResponse = appAsDownlinkQueueListWithHttpInfo(applicationIdsApplicationId = applicationIdsApplicationId, deviceId = deviceId, devEui = devEui, joinEui = joinEui, devAddr = devAddr)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3ApplicationDownlinks
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List the items currently in the downlink queue.
    * 
    * @param applicationIdsApplicationId  
    * @param deviceId  
    * @param devEui The LoRaWAN DevEUI. (optional)
    * @param joinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param devAddr The LoRaWAN DevAddr. (optional)
    * @return ApiInfrastructureResponse<V3ApplicationDownlinks?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsDownlinkQueueListWithHttpInfo(applicationIdsApplicationId: kotlin.String, deviceId: kotlin.String, devEui: kotlin.ByteArray?, joinEui: kotlin.ByteArray?, devAddr: kotlin.ByteArray?) : ApiInfrastructureResponse<V3ApplicationDownlinks?> {
        val localVariableConfig = appAsDownlinkQueueListRequestConfig(applicationIdsApplicationId = applicationIdsApplicationId, deviceId = deviceId, devEui = devEui, joinEui = joinEui, devAddr = devAddr)

        return request<Unit, V3ApplicationDownlinks>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation appAsDownlinkQueueList
    *
    * @param applicationIdsApplicationId  
    * @param deviceId  
    * @param devEui The LoRaWAN DevEUI. (optional)
    * @param joinEui The LoRaWAN JoinEUI (AppEUI until LoRaWAN 1.0.3 end devices). (optional)
    * @param devAddr The LoRaWAN DevAddr. (optional)
    * @return RequestConfig
    */
    fun appAsDownlinkQueueListRequestConfig(applicationIdsApplicationId: kotlin.String, deviceId: kotlin.String, devEui: kotlin.ByteArray?, joinEui: kotlin.ByteArray?, devAddr: kotlin.ByteArray?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (devEui != null) {
                    put("dev_eui", listOf(devEui.toString()))
                }
                if (joinEui != null) {
                    put("join_eui", listOf(joinEui.toString()))
                }
                if (devAddr != null) {
                    put("dev_addr", listOf(devAddr.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/applications/{application_ids.application_id}/devices/{device_id}/down".replace("{"+"application_ids.application_id"+"}", "$applicationIdsApplicationId").replace("{"+"device_id"+"}", "$deviceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Push downlink messages to the end of the downlink queue.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsDownlinkQueuePush(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DownlinkQueueRequest) : kotlin.Any {
        val localVarResponse = appAsDownlinkQueuePushWithHttpInfo(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Push downlink messages to the end of the downlink queue.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsDownlinkQueuePushWithHttpInfo(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DownlinkQueueRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = appAsDownlinkQueuePushRequestConfig(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return request<V3DownlinkQueueRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation appAsDownlinkQueuePush
    *
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return RequestConfig
    */
    fun appAsDownlinkQueuePushRequestConfig(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DownlinkQueueRequest) : RequestConfig<V3DownlinkQueueRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/push".replace("{"+"end_device_ids.application_ids.application_id"+"}", "$endDeviceIdsApplicationIdsApplicationId").replace("{"+"end_device_ids.device_id"+"}", "$endDeviceIdsDeviceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Replace the entire downlink queue with the specified messages. This can also be used to empty the queue by specifying no messages.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsDownlinkQueueReplace(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DownlinkQueueRequest) : kotlin.Any {
        val localVarResponse = appAsDownlinkQueueReplaceWithHttpInfo(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Replace the entire downlink queue with the specified messages. This can also be used to empty the queue by specifying no messages.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsDownlinkQueueReplaceWithHttpInfo(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DownlinkQueueRequest) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = appAsDownlinkQueueReplaceRequestConfig(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return request<V3DownlinkQueueRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation appAsDownlinkQueueReplace
    *
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return RequestConfig
    */
    fun appAsDownlinkQueueReplaceRequestConfig(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3DownlinkQueueRequest) : RequestConfig<V3DownlinkQueueRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/replace".replace("{"+"end_device_ids.application_ids.application_id"+"}", "$endDeviceIdsApplicationIdsApplicationId").replace("{"+"end_device_ids.device_id"+"}", "$endDeviceIdsDeviceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return V3EncodeDownlinkResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsEncodeDownlink(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3EncodeDownlinkRequest) : V3EncodeDownlinkResponse {
        val localVarResponse = appAsEncodeDownlinkWithHttpInfo(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3EncodeDownlinkResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return ApiInfrastructureResponse<V3EncodeDownlinkResponse?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsEncodeDownlinkWithHttpInfo(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3EncodeDownlinkRequest) : ApiInfrastructureResponse<V3EncodeDownlinkResponse?> {
        val localVariableConfig = appAsEncodeDownlinkRequestConfig(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return request<V3EncodeDownlinkRequest, V3EncodeDownlinkResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation appAsEncodeDownlink
    *
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return RequestConfig
    */
    fun appAsEncodeDownlinkRequestConfig(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3EncodeDownlinkRequest) : RequestConfig<V3EncodeDownlinkRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/down/encode".replace("{"+"end_device_ids.application_ids.application_id"+"}", "$endDeviceIdsApplicationIdsApplicationId").replace("{"+"end_device_ids.device_id"+"}", "$endDeviceIdsDeviceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get connection information to connect an MQTT client.
    * 
    * @param applicationId  
    * @return V3MQTTConnectionInfo
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsGetMQTTConnectionInfo(applicationId: kotlin.String) : V3MQTTConnectionInfo {
        val localVarResponse = appAsGetMQTTConnectionInfoWithHttpInfo(applicationId = applicationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3MQTTConnectionInfo
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get connection information to connect an MQTT client.
    * 
    * @param applicationId  
    * @return ApiInfrastructureResponse<V3MQTTConnectionInfo?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsGetMQTTConnectionInfoWithHttpInfo(applicationId: kotlin.String) : ApiInfrastructureResponse<V3MQTTConnectionInfo?> {
        val localVariableConfig = appAsGetMQTTConnectionInfoRequestConfig(applicationId = applicationId)

        return request<Unit, V3MQTTConnectionInfo>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation appAsGetMQTTConnectionInfo
    *
    * @param applicationId  
    * @return RequestConfig
    */
    fun appAsGetMQTTConnectionInfoRequestConfig(applicationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/as/applications/{application_id}/mqtt-connection-info".replace("{"+"application_id"+"}", "$applicationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Simulate an upstream message. This can be used to test integrations.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsSimulateUplink(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3ApplicationUp) : kotlin.Any {
        val localVarResponse = appAsSimulateUplinkWithHttpInfo(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Simulate an upstream message. This can be used to test integrations.
    * 
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun appAsSimulateUplinkWithHttpInfo(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3ApplicationUp) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = appAsSimulateUplinkRequestConfig(endDeviceIdsApplicationIdsApplicationId = endDeviceIdsApplicationIdsApplicationId, endDeviceIdsDeviceId = endDeviceIdsDeviceId, body = body)

        return request<V3ApplicationUp, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation appAsSimulateUplink
    *
    * @param endDeviceIdsApplicationIdsApplicationId  
    * @param endDeviceIdsDeviceId  
    * @param body  
    * @return RequestConfig
    */
    fun appAsSimulateUplinkRequestConfig(endDeviceIdsApplicationIdsApplicationId: kotlin.String, endDeviceIdsDeviceId: kotlin.String, body: V3ApplicationUp) : RequestConfig<V3ApplicationUp> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/as/applications/{end_device_ids.application_ids.application_id}/devices/{end_device_ids.device_id}/up/simulate".replace("{"+"end_device_ids.application_ids.application_id"+"}", "$endDeviceIdsApplicationIdsApplicationId").replace("{"+"end_device_ids.device_id"+"}", "$endDeviceIdsDeviceId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
