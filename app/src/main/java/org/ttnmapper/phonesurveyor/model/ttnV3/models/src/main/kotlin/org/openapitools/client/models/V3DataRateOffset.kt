/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 * 
 *
 * Values: _0,_1,_2,_3,_4,_5,_6,_7
 */

enum class V3DataRateOffset(val value: kotlin.String) {

    @Json(name = "DATA_RATE_OFFSET_0")
    _0("DATA_RATE_OFFSET_0"),

    @Json(name = "DATA_RATE_OFFSET_1")
    _1("DATA_RATE_OFFSET_1"),

    @Json(name = "DATA_RATE_OFFSET_2")
    _2("DATA_RATE_OFFSET_2"),

    @Json(name = "DATA_RATE_OFFSET_3")
    _3("DATA_RATE_OFFSET_3"),

    @Json(name = "DATA_RATE_OFFSET_4")
    _4("DATA_RATE_OFFSET_4"),

    @Json(name = "DATA_RATE_OFFSET_5")
    _5("DATA_RATE_OFFSET_5"),

    @Json(name = "DATA_RATE_OFFSET_6")
    _6("DATA_RATE_OFFSET_6"),

    @Json(name = "DATA_RATE_OFFSET_7")
    _7("DATA_RATE_OFFSET_7");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is V3DataRateOffset) "$data" else null

        /**
         * Returns a valid [V3DataRateOffset] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): V3DataRateOffset? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

