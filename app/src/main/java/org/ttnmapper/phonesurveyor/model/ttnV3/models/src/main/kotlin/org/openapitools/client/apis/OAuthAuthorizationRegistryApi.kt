/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3OAuthAccessTokens
import org.openapitools.client.models.V3OAuthClientAuthorizations

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class OAuthAuthorizationRegistryApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Delete (de-authorize) an OAuth client for the user.
    * 
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param clientIdsClientId  
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oAuthAuthorizationRegistryDelete(userIdsUserId: kotlin.String, clientIdsClientId: kotlin.String, userIdsEmail: kotlin.String?) : kotlin.Any {
        val localVarResponse = oAuthAuthorizationRegistryDeleteWithHttpInfo(userIdsUserId = userIdsUserId, clientIdsClientId = clientIdsClientId, userIdsEmail = userIdsEmail)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete (de-authorize) an OAuth client for the user.
    * 
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param clientIdsClientId  
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oAuthAuthorizationRegistryDeleteWithHttpInfo(userIdsUserId: kotlin.String, clientIdsClientId: kotlin.String, userIdsEmail: kotlin.String?) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = oAuthAuthorizationRegistryDeleteRequestConfig(userIdsUserId = userIdsUserId, clientIdsClientId = clientIdsClientId, userIdsEmail = userIdsEmail)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation oAuthAuthorizationRegistryDelete
    *
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param clientIdsClientId  
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return RequestConfig
    */
    fun oAuthAuthorizationRegistryDeleteRequestConfig(userIdsUserId: kotlin.String, clientIdsClientId: kotlin.String, userIdsEmail: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (userIdsEmail != null) {
                    put("user_ids.email", listOf(userIdsEmail.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/users/{user_ids.user_id}/authorizations/{client_ids.client_id}".replace("{"+"user_ids.user_id"+"}", "$userIdsUserId").replace("{"+"client_ids.client_id"+"}", "$clientIdsClientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete (invalidate) an OAuth access token.
    * 
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param clientIdsClientId  
    * @param id  
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oAuthAuthorizationRegistryDeleteToken(userIdsUserId: kotlin.String, clientIdsClientId: kotlin.String, id: kotlin.String, userIdsEmail: kotlin.String?) : kotlin.Any {
        val localVarResponse = oAuthAuthorizationRegistryDeleteTokenWithHttpInfo(userIdsUserId = userIdsUserId, clientIdsClientId = clientIdsClientId, id = id, userIdsEmail = userIdsEmail)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Delete (invalidate) an OAuth access token.
    * 
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param clientIdsClientId  
    * @param id  
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return ApiInfrastructureResponse<kotlin.Any?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oAuthAuthorizationRegistryDeleteTokenWithHttpInfo(userIdsUserId: kotlin.String, clientIdsClientId: kotlin.String, id: kotlin.String, userIdsEmail: kotlin.String?) : ApiInfrastructureResponse<kotlin.Any?> {
        val localVariableConfig = oAuthAuthorizationRegistryDeleteTokenRequestConfig(userIdsUserId = userIdsUserId, clientIdsClientId = clientIdsClientId, id = id, userIdsEmail = userIdsEmail)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation oAuthAuthorizationRegistryDeleteToken
    *
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param clientIdsClientId  
    * @param id  
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @return RequestConfig
    */
    fun oAuthAuthorizationRegistryDeleteTokenRequestConfig(userIdsUserId: kotlin.String, clientIdsClientId: kotlin.String, id: kotlin.String, userIdsEmail: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (userIdsEmail != null) {
                    put("user_ids.email", listOf(userIdsEmail.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/users/{user_ids.user_id}/authorizations/{client_ids.client_id}/tokens/{id}".replace("{"+"user_ids.user_id"+"}", "$userIdsUserId").replace("{"+"client_ids.client_id"+"}", "$clientIdsClientId").replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List OAuth clients that are authorized by the user.
    * 
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return V3OAuthClientAuthorizations
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oAuthAuthorizationRegistryList(userIdsUserId: kotlin.String, userIdsEmail: kotlin.String?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?) : V3OAuthClientAuthorizations {
        val localVarResponse = oAuthAuthorizationRegistryListWithHttpInfo(userIdsUserId = userIdsUserId, userIdsEmail = userIdsEmail, order = order, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3OAuthClientAuthorizations
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List OAuth clients that are authorized by the user.
    * 
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return ApiInfrastructureResponse<V3OAuthClientAuthorizations?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oAuthAuthorizationRegistryListWithHttpInfo(userIdsUserId: kotlin.String, userIdsEmail: kotlin.String?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?) : ApiInfrastructureResponse<V3OAuthClientAuthorizations?> {
        val localVariableConfig = oAuthAuthorizationRegistryListRequestConfig(userIdsUserId = userIdsUserId, userIdsEmail = userIdsEmail, order = order, limit = limit, page = page)

        return request<Unit, V3OAuthClientAuthorizations>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation oAuthAuthorizationRegistryList
    *
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return RequestConfig
    */
    fun oAuthAuthorizationRegistryListRequestConfig(userIdsUserId: kotlin.String, userIdsEmail: kotlin.String?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (userIdsEmail != null) {
                    put("user_ids.email", listOf(userIdsEmail.toString()))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{user_ids.user_id}/authorizations".replace("{"+"user_ids.user_id"+"}", "$userIdsUserId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List OAuth access tokens issued to the OAuth client on behalf of the user.
    * 
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param clientIdsClientId  
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return V3OAuthAccessTokens
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oAuthAuthorizationRegistryListTokens(userIdsUserId: kotlin.String, clientIdsClientId: kotlin.String, userIdsEmail: kotlin.String?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?) : V3OAuthAccessTokens {
        val localVarResponse = oAuthAuthorizationRegistryListTokensWithHttpInfo(userIdsUserId = userIdsUserId, clientIdsClientId = clientIdsClientId, userIdsEmail = userIdsEmail, order = order, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3OAuthAccessTokens
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * List OAuth access tokens issued to the OAuth client on behalf of the user.
    * 
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param clientIdsClientId  
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return ApiInfrastructureResponse<V3OAuthAccessTokens?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oAuthAuthorizationRegistryListTokensWithHttpInfo(userIdsUserId: kotlin.String, clientIdsClientId: kotlin.String, userIdsEmail: kotlin.String?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?) : ApiInfrastructureResponse<V3OAuthAccessTokens?> {
        val localVariableConfig = oAuthAuthorizationRegistryListTokensRequestConfig(userIdsUserId = userIdsUserId, clientIdsClientId = clientIdsClientId, userIdsEmail = userIdsEmail, order = order, limit = limit, page = page)

        return request<Unit, V3OAuthAccessTokens>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation oAuthAuthorizationRegistryListTokens
    *
    * @param userIdsUserId This ID shares namespace with organization IDs. 
    * @param clientIdsClientId  
    * @param userIdsEmail Secondary identifier, which can only be used in specific requests. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @return RequestConfig
    */
    fun oAuthAuthorizationRegistryListTokensRequestConfig(userIdsUserId: kotlin.String, clientIdsClientId: kotlin.String, userIdsEmail: kotlin.String?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (userIdsEmail != null) {
                    put("user_ids.email", listOf(userIdsEmail.toString()))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users/{user_ids.user_id}/authorizations/{client_ids.client_id}/tokens".replace("{"+"user_ids.user_id"+"}", "$userIdsUserId").replace("{"+"client_ids.client_id"+"}", "$clientIdsClientId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
