/**
 * The Things Stack for LoRaWAN v3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RuntimeError
import org.openapitools.client.models.V3Applications
import org.openapitools.client.models.V3Clients
import org.openapitools.client.models.V3Gateways
import org.openapitools.client.models.V3Organizations
import org.openapitools.client.models.V3Users

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiInfrastructureResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class EntityRegistrySearchApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Search for applications that match the conditions specified in the request. Non-admin users will only match applications that they have rights on.
    * 
    * @param idContains Find applications where the ID contains this substring. (optional)
    * @param nameContains Find applications where the name contains this substring. (optional)
    * @param descriptionContains Find applications where the description contains this substring. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted applications. (optional)
    * @return V3Applications
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entityRegistrySearchSearchApplications(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Applications {
        val localVarResponse = entityRegistrySearchSearchApplicationsWithHttpInfo(idContains = idContains, nameContains = nameContains, descriptionContains = descriptionContains, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Applications
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search for applications that match the conditions specified in the request. Non-admin users will only match applications that they have rights on.
    * 
    * @param idContains Find applications where the ID contains this substring. (optional)
    * @param nameContains Find applications where the name contains this substring. (optional)
    * @param descriptionContains Find applications where the description contains this substring. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted applications. (optional)
    * @return ApiInfrastructureResponse<V3Applications?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entityRegistrySearchSearchApplicationsWithHttpInfo(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Applications?> {
        val localVariableConfig = entityRegistrySearchSearchApplicationsRequestConfig(idContains = idContains, nameContains = nameContains, descriptionContains = descriptionContains, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Applications>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation entityRegistrySearchSearchApplications
    *
    * @param idContains Find applications where the ID contains this substring. (optional)
    * @param nameContains Find applications where the name contains this substring. (optional)
    * @param descriptionContains Find applications where the description contains this substring. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted applications. (optional)
    * @return RequestConfig
    */
    fun entityRegistrySearchSearchApplicationsRequestConfig(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (idContains != null) {
                    put("id_contains", listOf(idContains.toString()))
                }
                if (nameContains != null) {
                    put("name_contains", listOf(nameContains.toString()))
                }
                if (descriptionContains != null) {
                    put("description_contains", listOf(descriptionContains.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search/applications",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Search for OAuth clients that match the conditions specified in the request. Non-admin users will only match OAuth clients that they have rights on.
    * 
    * @param idContains Find OAuth clients where the ID contains this substring. (optional)
    * @param nameContains Find OAuth clients where the name contains this substring. (optional)
    * @param descriptionContains Find OAuth clients where the description contains this substring. (optional)
    * @param state Find OAuth clients where the state is any of these states.   - STATE_REQUESTED: Denotes that the entity has been requested and is pending review by an admin.  - STATE_APPROVED: Denotes that the entity has been reviewed and approved by an admin.  - STATE_REJECTED: Denotes that the entity has been reviewed and rejected by an admin.  - STATE_FLAGGED: Denotes that the entity has been flagged and is pending review by an admin.  - STATE_SUSPENDED: Denotes that the entity has been reviewed and suspended by an admin. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted OAuth clients. (optional)
    * @return V3Clients
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entityRegistrySearchSearchClients(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, state: kotlin.collections.List<kotlin.String>?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Clients {
        val localVarResponse = entityRegistrySearchSearchClientsWithHttpInfo(idContains = idContains, nameContains = nameContains, descriptionContains = descriptionContains, state = state, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Clients
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search for OAuth clients that match the conditions specified in the request. Non-admin users will only match OAuth clients that they have rights on.
    * 
    * @param idContains Find OAuth clients where the ID contains this substring. (optional)
    * @param nameContains Find OAuth clients where the name contains this substring. (optional)
    * @param descriptionContains Find OAuth clients where the description contains this substring. (optional)
    * @param state Find OAuth clients where the state is any of these states.   - STATE_REQUESTED: Denotes that the entity has been requested and is pending review by an admin.  - STATE_APPROVED: Denotes that the entity has been reviewed and approved by an admin.  - STATE_REJECTED: Denotes that the entity has been reviewed and rejected by an admin.  - STATE_FLAGGED: Denotes that the entity has been flagged and is pending review by an admin.  - STATE_SUSPENDED: Denotes that the entity has been reviewed and suspended by an admin. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted OAuth clients. (optional)
    * @return ApiInfrastructureResponse<V3Clients?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entityRegistrySearchSearchClientsWithHttpInfo(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, state: kotlin.collections.List<kotlin.String>?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Clients?> {
        val localVariableConfig = entityRegistrySearchSearchClientsRequestConfig(idContains = idContains, nameContains = nameContains, descriptionContains = descriptionContains, state = state, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Clients>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation entityRegistrySearchSearchClients
    *
    * @param idContains Find OAuth clients where the ID contains this substring. (optional)
    * @param nameContains Find OAuth clients where the name contains this substring. (optional)
    * @param descriptionContains Find OAuth clients where the description contains this substring. (optional)
    * @param state Find OAuth clients where the state is any of these states.   - STATE_REQUESTED: Denotes that the entity has been requested and is pending review by an admin.  - STATE_APPROVED: Denotes that the entity has been reviewed and approved by an admin.  - STATE_REJECTED: Denotes that the entity has been reviewed and rejected by an admin.  - STATE_FLAGGED: Denotes that the entity has been flagged and is pending review by an admin.  - STATE_SUSPENDED: Denotes that the entity has been reviewed and suspended by an admin. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted OAuth clients. (optional)
    * @return RequestConfig
    */
    fun entityRegistrySearchSearchClientsRequestConfig(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, state: kotlin.collections.List<kotlin.String>?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (idContains != null) {
                    put("id_contains", listOf(idContains.toString()))
                }
                if (nameContains != null) {
                    put("name_contains", listOf(nameContains.toString()))
                }
                if (descriptionContains != null) {
                    put("description_contains", listOf(descriptionContains.toString()))
                }
                if (state != null) {
                    put("state", toMultiValue(state.toList(), "multi"))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search/clients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Search for gateways that match the conditions specified in the request. Non-admin users will only match gateways that they have rights on.
    * 
    * @param idContains Find gateways where the ID contains this substring. (optional)
    * @param nameContains Find gateways where the name contains this substring. (optional)
    * @param descriptionContains Find gateways where the description contains this substring. (optional)
    * @param euiContains Find gateways where the (hexadecimal) EUI contains this substring. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return V3Gateways
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entityRegistrySearchSearchGateways(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, euiContains: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Gateways {
        val localVarResponse = entityRegistrySearchSearchGatewaysWithHttpInfo(idContains = idContains, nameContains = nameContains, descriptionContains = descriptionContains, euiContains = euiContains, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Gateways
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search for gateways that match the conditions specified in the request. Non-admin users will only match gateways that they have rights on.
    * 
    * @param idContains Find gateways where the ID contains this substring. (optional)
    * @param nameContains Find gateways where the name contains this substring. (optional)
    * @param descriptionContains Find gateways where the description contains this substring. (optional)
    * @param euiContains Find gateways where the (hexadecimal) EUI contains this substring. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return ApiInfrastructureResponse<V3Gateways?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entityRegistrySearchSearchGatewaysWithHttpInfo(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, euiContains: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Gateways?> {
        val localVariableConfig = entityRegistrySearchSearchGatewaysRequestConfig(idContains = idContains, nameContains = nameContains, descriptionContains = descriptionContains, euiContains = euiContains, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Gateways>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation entityRegistrySearchSearchGateways
    *
    * @param idContains Find gateways where the ID contains this substring. (optional)
    * @param nameContains Find gateways where the name contains this substring. (optional)
    * @param descriptionContains Find gateways where the description contains this substring. (optional)
    * @param euiContains Find gateways where the (hexadecimal) EUI contains this substring. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted gateways. (optional)
    * @return RequestConfig
    */
    fun entityRegistrySearchSearchGatewaysRequestConfig(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, euiContains: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (idContains != null) {
                    put("id_contains", listOf(idContains.toString()))
                }
                if (nameContains != null) {
                    put("name_contains", listOf(nameContains.toString()))
                }
                if (descriptionContains != null) {
                    put("description_contains", listOf(descriptionContains.toString()))
                }
                if (euiContains != null) {
                    put("eui_contains", listOf(euiContains.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search/gateways",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Search for organizations that match the conditions specified in the request. Non-admin users will only match organizations that they have rights on.
    * 
    * @param idContains Find organizations where the ID contains this substring. (optional)
    * @param nameContains Find organizations where the name contains this substring. (optional)
    * @param descriptionContains Find organizations where the description contains this substring. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted organizations. (optional)
    * @return V3Organizations
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entityRegistrySearchSearchOrganizations(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Organizations {
        val localVarResponse = entityRegistrySearchSearchOrganizationsWithHttpInfo(idContains = idContains, nameContains = nameContains, descriptionContains = descriptionContains, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Organizations
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search for organizations that match the conditions specified in the request. Non-admin users will only match organizations that they have rights on.
    * 
    * @param idContains Find organizations where the ID contains this substring. (optional)
    * @param nameContains Find organizations where the name contains this substring. (optional)
    * @param descriptionContains Find organizations where the description contains this substring. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted organizations. (optional)
    * @return ApiInfrastructureResponse<V3Organizations?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entityRegistrySearchSearchOrganizationsWithHttpInfo(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Organizations?> {
        val localVariableConfig = entityRegistrySearchSearchOrganizationsRequestConfig(idContains = idContains, nameContains = nameContains, descriptionContains = descriptionContains, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Organizations>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation entityRegistrySearchSearchOrganizations
    *
    * @param idContains Find organizations where the ID contains this substring. (optional)
    * @param nameContains Find organizations where the name contains this substring. (optional)
    * @param descriptionContains Find organizations where the description contains this substring. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted organizations. (optional)
    * @return RequestConfig
    */
    fun entityRegistrySearchSearchOrganizationsRequestConfig(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (idContains != null) {
                    put("id_contains", listOf(idContains.toString()))
                }
                if (nameContains != null) {
                    put("name_contains", listOf(nameContains.toString()))
                }
                if (descriptionContains != null) {
                    put("description_contains", listOf(descriptionContains.toString()))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search/organizations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Search for users that match the conditions specified in the request. This is only available to admin users.
    * 
    * @param idContains Find users where the ID contains this substring. (optional)
    * @param nameContains Find users where the name contains this substring. (optional)
    * @param descriptionContains Find users where the description contains this substring. (optional)
    * @param state Find users where the state is any of these states.   - STATE_REQUESTED: Denotes that the entity has been requested and is pending review by an admin.  - STATE_APPROVED: Denotes that the entity has been reviewed and approved by an admin.  - STATE_REJECTED: Denotes that the entity has been reviewed and rejected by an admin.  - STATE_FLAGGED: Denotes that the entity has been flagged and is pending review by an admin.  - STATE_SUSPENDED: Denotes that the entity has been reviewed and suspended by an admin. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted users. (optional)
    * @return V3Users
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entityRegistrySearchSearchUsers(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, state: kotlin.collections.List<kotlin.String>?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : V3Users {
        val localVarResponse = entityRegistrySearchSearchUsersWithHttpInfo(idContains = idContains, nameContains = nameContains, descriptionContains = descriptionContains, state = state, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as V3Users
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search for users that match the conditions specified in the request. This is only available to admin users.
    * 
    * @param idContains Find users where the ID contains this substring. (optional)
    * @param nameContains Find users where the name contains this substring. (optional)
    * @param descriptionContains Find users where the description contains this substring. (optional)
    * @param state Find users where the state is any of these states.   - STATE_REQUESTED: Denotes that the entity has been requested and is pending review by an admin.  - STATE_APPROVED: Denotes that the entity has been reviewed and approved by an admin.  - STATE_REJECTED: Denotes that the entity has been reviewed and rejected by an admin.  - STATE_FLAGGED: Denotes that the entity has been flagged and is pending review by an admin.  - STATE_SUSPENDED: Denotes that the entity has been reviewed and suspended by an admin. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted users. (optional)
    * @return ApiInfrastructureResponse<V3Users?>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun entityRegistrySearchSearchUsersWithHttpInfo(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, state: kotlin.collections.List<kotlin.String>?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : ApiInfrastructureResponse<V3Users?> {
        val localVariableConfig = entityRegistrySearchSearchUsersRequestConfig(idContains = idContains, nameContains = nameContains, descriptionContains = descriptionContains, state = state, fieldMaskPaths = fieldMaskPaths, order = order, limit = limit, page = page, deleted = deleted)

        return request<Unit, V3Users>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation entityRegistrySearchSearchUsers
    *
    * @param idContains Find users where the ID contains this substring. (optional)
    * @param nameContains Find users where the name contains this substring. (optional)
    * @param descriptionContains Find users where the description contains this substring. (optional)
    * @param state Find users where the state is any of these states.   - STATE_REQUESTED: Denotes that the entity has been requested and is pending review by an admin.  - STATE_APPROVED: Denotes that the entity has been reviewed and approved by an admin.  - STATE_REJECTED: Denotes that the entity has been reviewed and rejected by an admin.  - STATE_FLAGGED: Denotes that the entity has been flagged and is pending review by an admin.  - STATE_SUSPENDED: Denotes that the entity has been reviewed and suspended by an admin. (optional)
    * @param fieldMaskPaths The set of field mask paths. (optional)
    * @param order Order the results by this field path (must be present in the field mask). Default ordering is by ID. Prepend with a minus (-) to reverse the order. (optional)
    * @param limit Limit the number of results per page. (optional)
    * @param page Page number for pagination. 0 is interpreted as 1. (optional)
    * @param deleted Only return recently deleted users. (optional)
    * @return RequestConfig
    */
    fun entityRegistrySearchSearchUsersRequestConfig(idContains: kotlin.String?, nameContains: kotlin.String?, descriptionContains: kotlin.String?, state: kotlin.collections.List<kotlin.String>?, fieldMaskPaths: kotlin.collections.List<kotlin.String>?, order: kotlin.String?, limit: kotlin.Long?, page: kotlin.Long?, deleted: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (idContains != null) {
                    put("id_contains", listOf(idContains.toString()))
                }
                if (nameContains != null) {
                    put("name_contains", listOf(nameContains.toString()))
                }
                if (descriptionContains != null) {
                    put("description_contains", listOf(descriptionContains.toString()))
                }
                if (state != null) {
                    put("state", toMultiValue(state.toList(), "multi"))
                }
                if (fieldMaskPaths != null) {
                    put("field_mask.paths", toMultiValue(fieldMaskPaths.toList(), "multi"))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (deleted != null) {
                    put("deleted", listOf(deleted.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
